{"version":3,"file":"vue-types.modern.js","sources":["../src/config.ts","../src/utils.ts","../src/validators/native.ts","../src/validators/custom.ts","../src/validators/oneof.ts","../src/validators/oneoftype.ts","../src/validators/arrayof.ts","../src/validators/instanceof.ts","../src/validators/objectof.ts","../src/validators/shape.ts","../src/index.ts","../src/sensibles.ts"],"sourcesContent":["import { VueTypesConfig } from './types'\n\nexport const config: VueTypesConfig = {\n  silent: false,\n  logLevel: 'warn',\n}\n","import { isPlainObject as _isPlainObject } from 'is-plain-object'\nimport { config } from './config'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\n/**\n * A function that returns its first argument\n *\n * @param arg - Any argument\n */\nexport const identity = (arg: any) => arg\n\nlet warn: (msg: string) => string | void = identity\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg: string, level = config.logLevel) {\n        if (config.silent === false) {\n          console[level](`[VueTypes warn]: ${msg}`)\n        }\n      }\n    : identity\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = <T extends Function>(value: unknown): value is T =>\n  toString.call(value) === '[object Function]'\n\n/**\n * Checks if the passed-in value is a VueTypes type\n * @param value - The value to check\n */\nexport const isVueTypeDef = <T>(\n  value: any,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) && has(value, '_vueTypes_name')\n\n/**\n * Checks if the passed-in value is a Vue prop definition object or a VueTypes type\n * @param value - The value to check\n */\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\n/**\n * Binds a function to a context and saves a reference to the original.\n *\n * @param fn - Target function\n * @param ctx - New function context\n */\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx) as WrappedFn, '__original', {\n    value: fn,\n  })\n}\n\n/**\n * Returns the original function bounded with `bindTo`. If the passed-in function\n * has not be bound, the function itself will be returned instead.\n *\n * @param fn - Function to unwrap\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object.\n *\n * If `silent` is `false` (default) will return a boolean. If it is set to `true`\n * it will return `true` on success or a string error message on failure\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(\n  type: T,\n  value: U,\n  silent = false,\n): string | boolean {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined || typeToCheck.type === true) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(\n        (type: any) => validateType(type, value, true) === true,\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    const msg = `${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`\n    if (silent === false) {\n      warn(msg)\n      return false\n    }\n    return msg\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    const oldWarn = warn\n    const warnLog: string[] = []\n    warn = (msg) => {\n      warnLog.push(msg)\n    }\n\n    valid = typeToCheck.validator(value)\n    warn = oldWarn\n\n    if (!valid) {\n      const msg = (warnLog.length > 1 ? '* ' : '') + warnLog.join('\\n* ')\n      warnLog.length = 0\n      if (silent === false) {\n        warn(msg)\n        return valid\n      }\n      return msg\n    }\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj as VueTypeDef<T>, {\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined) {\n          if (has(this, 'default')) {\n            delete this.default\n          }\n          return this\n        }\n        if (!isFunction(def) && validateType(this, def, true) !== true) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      if (isFunction(this.validator)) {\n        warn(\n          `${\n            this._vueTypes_name\n          } - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(\n            this,\n          )}`,\n        )\n      }\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\n/**\n *  Clones an object preserving all of it's own keys.\n *\n * @param obj - Object to clone\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function clone<T extends object>(obj: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(obj).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(obj, key)\n  })\n  return Object.defineProperties({}, descriptors) as T\n}\n\n/**\n * Return a new VueTypes type using another type as base.\n *\n * Properties in the `props` object will overwrite those defined in the source one\n * expect for the `validator` function. In that case both functions will be executed in series.\n *\n * @param name - Name of the new type\n * @param source - Source type\n * @param props - Custom type properties\n */\nexport function fromType<T extends VueTypeDef<any>>(name: string, source: T): T\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props: V): Omit<T, keyof V> & V\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props?: V) {\n  // 1. create an exact copy of the source type\n  const copy = clone(source)\n\n  // 2. give it a new name\n  copy._vueTypes_name = name\n\n  if (!isPlainObject(props)) {\n    return copy\n  }\n  const { validator, ...rest } = props\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator) as (_v: any) => boolean\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: T, value: any) {\n            return (\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              prevValidator!.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest as V)\n}\n\nexport function indent(string: string) {\n  return string.replace(/^(?!\\s*$)/gm, '  ')\n}\n","import { toType, toValidableType, isInteger } from '../utils'\nimport { PropType } from '../types'\n\nexport const any = <T = any>() => toValidableType<T>('any', {})\n\nexport const func = <T extends (...args: any[]) => any>() =>\n  toValidableType<T>('function', {\n    type: Function as PropType<T>,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = <T extends string = string>() =>\n  toValidableType<T>('string', {\n    type: String as unknown as PropType<T>,\n  })\n\nexport const number = <T extends number = number>() =>\n  toValidableType<T>('number', {\n    type: Number as unknown as PropType<T>,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = <T extends number = number>() =>\n  toType<T>('integer', {\n    type: Number as unknown as PropType<T>,\n    validator(value) {\n      return isInteger(value)\n    },\n  })\n\nexport const symbol = () =>\n  toType<symbol>('symbol', {\n    validator(value) {\n      return typeof value === 'symbol'\n    },\n  })\n","import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef, PropType } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    type: null as unknown as PropType<T>,\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n","import { Prop } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<T extends readonly any[]>(arr: T) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument.',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr.join('\", \"')}\".`\n  const allowedTypes = arr.reduce((ret, v) => {\n    if (v !== null && v !== undefined) {\n      const constr = (v as any).constructor\n      ret.indexOf(constr) === -1 && ret.push(constr)\n    }\n    return ret\n  }, [] as Prop<T[number]>[])\n\n  return toType<T[number]>('oneOf', {\n    type: allowedTypes.length > 0 ? allowedTypes : undefined,\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType, PropType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  toType,\n  validateType,\n  warn,\n  indent,\n} from '../utils'\n\nexport default function oneOfType<\n  D extends V,\n  U extends VueProp<any> | Prop<any> = any,\n  V = InferType<U>,\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (\n        isVueTypeDef<V>(type) &&\n        type._vueTypes_name === 'oneOf' &&\n        type.type\n      ) {\n        nativeChecks = nativeChecks.concat(type.type as PropType<V>)\n        continue\n      }\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n      }\n      if (type.type === true || !type.type) {\n        warn('oneOfType - invalid usage of \"true\" or \"null\" as types.')\n        continue\n      } else {\n        nativeChecks = nativeChecks.concat(type.type)\n      }\n    } else {\n      nativeChecks.push(type as Prop<V>)\n    }\n  }\n\n  // filter duplicates\n  nativeChecks = nativeChecks.filter((t, i) => nativeChecks.indexOf(t) === i)\n\n  const typeProp = nativeChecks.length > 0 ? nativeChecks : null\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<D>('oneOfType', {\n      type: typeProp as unknown as PropType<D>,\n    })\n  }\n\n  return toType<D>('oneOfType', {\n    type: typeProp as unknown as PropType<D>,\n    validator(value) {\n      const err: string[] = []\n      const valid = arr.some((type) => {\n        const t =\n          isVueTypeDef(type) && type._vueTypes_name === 'oneOf'\n            ? type.type || null\n            : type\n        const res = validateType(t, value, true)\n        if (typeof res === 'string') {\n          err.push(res)\n        }\n        return res === true\n      })\n      if (!valid) {\n        warn(\n          `oneOfType - provided value does not match any of the ${\n            err.length\n          } passed-in validators:\\n${indent(err.join('\\n'))}`,\n        )\n      }\n\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function arrayOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<InferType<T>[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      let vResult: string | boolean = ''\n      const valid = values.every((value) => {\n        vResult = validateType(type, value, true)\n        return vResult === true\n      })\n      if (!valid) {\n        warn(`arrayOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function objectOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<{ [key: string]: InferType<T> }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      let vResult: string | boolean = ''\n      const valid = Object.keys(obj).every((key) => {\n        vResult = validateType(type, obj[key], true)\n        return vResult === true\n      })\n\n      if (!valid) {\n        warn(`objectOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject, indent } from '../utils'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default function shape<T extends object>(obj: {\n  [K in keyof T]: Prop<T[K]> | VueProp<T[K]>\n}): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        const missing = requiredKeys.filter(\n          (req) => valueKeys.indexOf(req) === -1,\n        )\n        if (missing.length === 1) {\n          warn(`shape - required property \"${missing[0]}\" is not defined.`)\n        } else {\n          warn(\n            `shape - required properties \"${missing.join(\n              '\", \"',\n            )}\" are not defined.`,\n          )\n        }\n\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(\n            `shape - shape definition does not include a \"${key}\" property. Allowed keys: \"${keys.join(\n              '\", \"',\n            )}\".`,\n          )\n          return false\n        }\n        const type = (obj as any)[key]\n        const valid = validateType(type, value[key], true)\n        if (typeof valid === 'string') {\n          warn(`shape - \"${key}\" property validation error:\\n ${indent(valid)}`)\n        }\n        return valid === true\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n","import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueTypeShape,\n  VueTypeLooseShape,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from './types'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\nimport { config } from './config'\n\nconst BaseVueTypes = /*#__PURE__*/ (() =>\n  class BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = {}\n\n    static sensibleDefaults: Partial<VueTypesDefaults> | boolean\n\n    static config = config\n\n    static get any() {\n      return any()\n    }\n    static get func() {\n      return func().def(this.defaults.func)\n    }\n    static get bool() {\n      return bool().def(this.defaults.bool)\n    }\n    static get string() {\n      return string().def(this.defaults.string)\n    }\n    static get number() {\n      return number().def(this.defaults.number)\n    }\n    static get array() {\n      return array().def(this.defaults.array)\n    }\n    static get object() {\n      return object().def(this.defaults.object)\n    }\n    static get integer() {\n      return integer().def(this.defaults.integer)\n    }\n    static get symbol() {\n      return symbol()\n    }\n\n    static readonly custom = custom\n    static readonly oneOf = oneOf\n    static readonly instanceOf = instanceOf\n    static readonly oneOfType = oneOfType\n    static readonly arrayOf = arrayOf\n    static readonly objectOf = objectOf\n    static readonly shape = shape\n\n    static extend<T extends typeof BaseVueTypes>(\n      props: ExtendProps | ExtendProps[],\n    ): T {\n      if (isArray(props)) {\n        props.forEach((p) => this.extend(p))\n        return this as any\n      }\n\n      const { name, validate = false, getter = false, ...opts } = props\n\n      if (has(this, name as any)) {\n        throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n      }\n\n      const { type } = opts\n      if (isVueTypeDef(type)) {\n        // we are using as base type a vue-type object\n\n        // detach the original type\n        // we are going to inherit the parent data.\n        delete opts.type\n\n        if (getter) {\n          return Object.defineProperty(this as T, name, {\n            get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n          })\n        }\n        return Object.defineProperty(this as T, name, {\n          value(...args: unknown[]) {\n            const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n            if (t.validator) {\n              t.validator = t.validator.bind(t, ...args)\n            }\n            return t\n          },\n        })\n      }\n\n      let descriptor: PropertyDescriptor\n      if (getter) {\n        descriptor = {\n          get() {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            if (validate) {\n              return toValidableType<T>(name, typeOptions)\n            }\n            return toType<T>(name, typeOptions)\n          },\n          enumerable: true,\n        }\n      } else {\n        descriptor = {\n          value(...args: T[]) {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            let ret: VueTypeDef<T>\n            if (validate) {\n              ret = toValidableType<T>(name, typeOptions)\n            } else {\n              ret = toType<T>(name, typeOptions)\n            }\n\n            if (typeOptions.validator) {\n              ret.validator = typeOptions.validator.bind(ret, ...args)\n            }\n            return ret\n          },\n          enumerable: true,\n        }\n      }\n\n      return Object.defineProperty(this as T, name, descriptor)\n    }\n\n    static utils = {\n      validate<T, U>(value: T, type: U) {\n        return validateType<U, T>(type, value, true) === true\n      },\n      toType<T = unknown>(\n        name: string,\n        obj: PropOptions<T>,\n        validable = false,\n      ): VueTypeDef<T> | VueTypeValidableDef<T> {\n        return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n      },\n    }\n  })()\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes /*#__PURE__*/ extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n  config,\n}\n\nexport type VueTypesInterface = ReturnType<typeof createTypes>\nexport type { VueTypeDef, VueTypeValidableDef, VueTypeShape, VueTypeLooseShape }\n","import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n"],"names":["config","silent","logLevel","ObjProto","Object","prototype","toString","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","getType","fn","type","match","isPlainObject","_isPlainObject","identity","arg","warn","process","env","NODE_ENV","hasConsole","console","msg","level","has","obj","prop","call","isInteger","Number","value","isFinite","Math","floor","isArray","Array","isFunction","isVueTypeDef","isComplexType","some","k","bindTo","ctx","defineProperty","bind","validateType","typeToCheck","valid","expectedType","namePrefix","_vueTypes_name","undefined","required","map","join","constructor","getNativeType","validator","oldWarn","warnLog","push","length","toType","name","defineProperties","writable","isRequired","get","this","def","default","assign","toValidableType","JSON","stringify","fromType","source","props","copy","descriptors","getOwnPropertyNames","forEach","key","getOwnPropertyDescriptor","clone","rest","prevValidator","__original","indent","string","replace","any","func","Function","bool","Boolean","String","number","array","object","integer","symbol","custom","validatorFn","warnMsg","TypeError","oneOf","arr","allowedTypes","reduce","ret","v","constr","indexOf","oneOfType","hasCustomValidators","nativeChecks","i","concat","filter","t","typeProp","err","res","arrayOf","values","vResult","every","instanceOf","instanceConstructor","objectOf","keys","shape","requiredKeys","_obj$key","valueKeys","req","missing","_vueTypes_isLoose","BaseVueTypes","defaults","static","p","extend","validate","getter","opts","args","descriptor","typeOptions","enumerable","sensibleDefaults","utils","validable","createTypes","defs","VueTypes"],"mappings":"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"}