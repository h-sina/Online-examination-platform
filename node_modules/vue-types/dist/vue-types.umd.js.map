{"version":3,"file":"vue-types.umd.js","sources":["../src/config.ts","../src/utils.ts","../src/validators/native.ts","../src/validators/custom.ts","../src/validators/oneof.ts","../src/validators/oneoftype.ts","../src/validators/arrayof.ts","../src/validators/instanceof.ts","../src/validators/objectof.ts","../src/validators/shape.ts","../src/index.ts","../src/sensibles.ts"],"sourcesContent":["import { VueTypesConfig } from './types'\n\nexport const config: VueTypesConfig = {\n  silent: false,\n  logLevel: 'warn',\n}\n","import { isPlainObject as _isPlainObject } from 'is-plain-object'\nimport { config } from './config'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\n/**\n * A function that returns its first argument\n *\n * @param arg - Any argument\n */\nexport const identity = (arg: any) => arg\n\nlet warn: (msg: string) => string | void = identity\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg: string, level = config.logLevel) {\n        if (config.silent === false) {\n          console[level](`[VueTypes warn]: ${msg}`)\n        }\n      }\n    : identity\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isFunction = <T extends Function>(value: unknown): value is T =>\n  toString.call(value) === '[object Function]'\n\n/**\n * Checks if the passed-in value is a VueTypes type\n * @param value - The value to check\n */\nexport const isVueTypeDef = <T>(\n  value: any,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) && has(value, '_vueTypes_name')\n\n/**\n * Checks if the passed-in value is a Vue prop definition object or a VueTypes type\n * @param value - The value to check\n */\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\n/**\n * Binds a function to a context and saves a reference to the original.\n *\n * @param fn - Target function\n * @param ctx - New function context\n */\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx) as WrappedFn, '__original', {\n    value: fn,\n  })\n}\n\n/**\n * Returns the original function bounded with `bindTo`. If the passed-in function\n * has not be bound, the function itself will be returned instead.\n *\n * @param fn - Function to unwrap\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object.\n *\n * If `silent` is `false` (default) will return a boolean. If it is set to `true`\n * it will return `true` on success or a string error message on failure\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(\n  type: T,\n  value: U,\n  silent = false,\n): string | boolean {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined || typeToCheck.type === true) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some(\n        (type: any) => validateType(type, value, true) === true,\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    const msg = `${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`\n    if (silent === false) {\n      warn(msg)\n      return false\n    }\n    return msg\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    const oldWarn = warn\n    const warnLog: string[] = []\n    warn = (msg) => {\n      warnLog.push(msg)\n    }\n\n    valid = typeToCheck.validator(value)\n    warn = oldWarn\n\n    if (!valid) {\n      const msg = (warnLog.length > 1 ? '* ' : '') + warnLog.join('\\n* ')\n      warnLog.length = 0\n      if (silent === false) {\n        warn(msg)\n        return valid\n      }\n      return msg\n    }\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj as VueTypeDef<T>, {\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined) {\n          if (has(this, 'default')) {\n            delete this.default\n          }\n          return this\n        }\n        if (!isFunction(def) && validateType(this, def, true) !== true) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      if (isFunction(this.validator)) {\n        warn(\n          `${\n            this._vueTypes_name\n          } - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(\n            this,\n          )}`,\n        )\n      }\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\n/**\n *  Clones an object preserving all of it's own keys.\n *\n * @param obj - Object to clone\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function clone<T extends object>(obj: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(obj).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(obj, key)\n  })\n  return Object.defineProperties({}, descriptors) as T\n}\n\n/**\n * Return a new VueTypes type using another type as base.\n *\n * Properties in the `props` object will overwrite those defined in the source one\n * expect for the `validator` function. In that case both functions will be executed in series.\n *\n * @param name - Name of the new type\n * @param source - Source type\n * @param props - Custom type properties\n */\nexport function fromType<T extends VueTypeDef<any>>(name: string, source: T): T\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props: V): Omit<T, keyof V> & V\nexport function fromType<\n  T extends VueTypeDef<any>,\n  V extends PropOptions<InferType<T>>,\n>(name: string, source: T, props?: V) {\n  // 1. create an exact copy of the source type\n  const copy = clone(source)\n\n  // 2. give it a new name\n  copy._vueTypes_name = name\n\n  if (!isPlainObject(props)) {\n    return copy\n  }\n  const { validator, ...rest } = props\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator) as (_v: any) => boolean\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: T, value: any) {\n            return (\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              prevValidator!.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest as V)\n}\n\nexport function indent(string: string) {\n  return string.replace(/^(?!\\s*$)/gm, '  ')\n}\n","import { toType, toValidableType, isInteger } from '../utils'\nimport { PropType } from '../types'\n\nexport const any = <T = any>() => toValidableType<T>('any', {})\n\nexport const func = <T extends (...args: any[]) => any>() =>\n  toValidableType<T>('function', {\n    type: Function as PropType<T>,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = <T extends string = string>() =>\n  toValidableType<T>('string', {\n    type: String as unknown as PropType<T>,\n  })\n\nexport const number = <T extends number = number>() =>\n  toValidableType<T>('number', {\n    type: Number as unknown as PropType<T>,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = <T extends number = number>() =>\n  toType<T>('integer', {\n    type: Number as unknown as PropType<T>,\n    validator(value) {\n      return isInteger(value)\n    },\n  })\n\nexport const symbol = () =>\n  toType<symbol>('symbol', {\n    validator(value) {\n      return typeof value === 'symbol'\n    },\n  })\n","import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef, PropType } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    type: null as unknown as PropType<T>,\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n","import { Prop } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<T extends readonly any[]>(arr: T) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument.',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr.join('\", \"')}\".`\n  const allowedTypes = arr.reduce((ret, v) => {\n    if (v !== null && v !== undefined) {\n      const constr = (v as any).constructor\n      ret.indexOf(constr) === -1 && ret.push(constr)\n    }\n    return ret\n  }, [] as Prop<T[number]>[])\n\n  return toType<T[number]>('oneOf', {\n    type: allowedTypes.length > 0 ? allowedTypes : undefined,\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType, PropType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  toType,\n  validateType,\n  warn,\n  indent,\n} from '../utils'\n\nexport default function oneOfType<\n  D extends V,\n  U extends VueProp<any> | Prop<any> = any,\n  V = InferType<U>,\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (\n        isVueTypeDef<V>(type) &&\n        type._vueTypes_name === 'oneOf' &&\n        type.type\n      ) {\n        nativeChecks = nativeChecks.concat(type.type as PropType<V>)\n        continue\n      }\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n      }\n      if (type.type === true || !type.type) {\n        warn('oneOfType - invalid usage of \"true\" or \"null\" as types.')\n        continue\n      } else {\n        nativeChecks = nativeChecks.concat(type.type)\n      }\n    } else {\n      nativeChecks.push(type as Prop<V>)\n    }\n  }\n\n  // filter duplicates\n  nativeChecks = nativeChecks.filter((t, i) => nativeChecks.indexOf(t) === i)\n\n  const typeProp = nativeChecks.length > 0 ? nativeChecks : null\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<D>('oneOfType', {\n      type: typeProp as unknown as PropType<D>,\n    })\n  }\n\n  return toType<D>('oneOfType', {\n    type: typeProp as unknown as PropType<D>,\n    validator(value) {\n      const err: string[] = []\n      const valid = arr.some((type) => {\n        const t =\n          isVueTypeDef(type) && type._vueTypes_name === 'oneOf'\n            ? type.type || null\n            : type\n        const res = validateType(t, value, true)\n        if (typeof res === 'string') {\n          err.push(res)\n        }\n        return res === true\n      })\n      if (!valid) {\n        warn(\n          `oneOfType - provided value does not match any of the ${\n            err.length\n          } passed-in validators:\\n${indent(err.join('\\n'))}`,\n        )\n      }\n\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function arrayOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<InferType<T>[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      let vResult: string | boolean = ''\n      const valid = values.every((value) => {\n        vResult = validateType(type, value, true)\n        return vResult === true\n      })\n      if (!valid) {\n        warn(`arrayOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { toType, validateType, warn, indent } from '../utils'\n\nexport default function objectOf<T extends VueProp<any> | Prop<any>>(type: T) {\n  return toType<{ [key: string]: InferType<T> }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      let vResult: string | boolean = ''\n      const valid = Object.keys(obj).every((key) => {\n        vResult = validateType(type, obj[key], true)\n        return vResult === true\n      })\n\n      if (!valid) {\n        warn(`objectOf - value validation error:\\n${indent(vResult as string)}`)\n      }\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject, indent } from '../utils'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default function shape<T extends object>(obj: {\n  [K in keyof T]: Prop<T[K]> | VueProp<T[K]>\n}): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        const missing = requiredKeys.filter(\n          (req) => valueKeys.indexOf(req) === -1,\n        )\n        if (missing.length === 1) {\n          warn(`shape - required property \"${missing[0]}\" is not defined.`)\n        } else {\n          warn(\n            `shape - required properties \"${missing.join(\n              '\", \"',\n            )}\" are not defined.`,\n          )\n        }\n\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(\n            `shape - shape definition does not include a \"${key}\" property. Allowed keys: \"${keys.join(\n              '\", \"',\n            )}\".`,\n          )\n          return false\n        }\n        const type = (obj as any)[key]\n        const valid = validateType(type, value[key], true)\n        if (typeof valid === 'string') {\n          warn(`shape - \"${key}\" property validation error:\\n ${indent(valid)}`)\n        }\n        return valid === true\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n","import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueTypeShape,\n  VueTypeLooseShape,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from './types'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\nimport { config } from './config'\n\nconst BaseVueTypes = /*#__PURE__*/ (() =>\n  class BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = {}\n\n    static sensibleDefaults: Partial<VueTypesDefaults> | boolean\n\n    static config = config\n\n    static get any() {\n      return any()\n    }\n    static get func() {\n      return func().def(this.defaults.func)\n    }\n    static get bool() {\n      return bool().def(this.defaults.bool)\n    }\n    static get string() {\n      return string().def(this.defaults.string)\n    }\n    static get number() {\n      return number().def(this.defaults.number)\n    }\n    static get array() {\n      return array().def(this.defaults.array)\n    }\n    static get object() {\n      return object().def(this.defaults.object)\n    }\n    static get integer() {\n      return integer().def(this.defaults.integer)\n    }\n    static get symbol() {\n      return symbol()\n    }\n\n    static readonly custom = custom\n    static readonly oneOf = oneOf\n    static readonly instanceOf = instanceOf\n    static readonly oneOfType = oneOfType\n    static readonly arrayOf = arrayOf\n    static readonly objectOf = objectOf\n    static readonly shape = shape\n\n    static extend<T extends typeof BaseVueTypes>(\n      props: ExtendProps | ExtendProps[],\n    ): T {\n      if (isArray(props)) {\n        props.forEach((p) => this.extend(p))\n        return this as any\n      }\n\n      const { name, validate = false, getter = false, ...opts } = props\n\n      if (has(this, name as any)) {\n        throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n      }\n\n      const { type } = opts\n      if (isVueTypeDef(type)) {\n        // we are using as base type a vue-type object\n\n        // detach the original type\n        // we are going to inherit the parent data.\n        delete opts.type\n\n        if (getter) {\n          return Object.defineProperty(this as T, name, {\n            get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n          })\n        }\n        return Object.defineProperty(this as T, name, {\n          value(...args: unknown[]) {\n            const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n            if (t.validator) {\n              t.validator = t.validator.bind(t, ...args)\n            }\n            return t\n          },\n        })\n      }\n\n      let descriptor: PropertyDescriptor\n      if (getter) {\n        descriptor = {\n          get() {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            if (validate) {\n              return toValidableType<T>(name, typeOptions)\n            }\n            return toType<T>(name, typeOptions)\n          },\n          enumerable: true,\n        }\n      } else {\n        descriptor = {\n          value(...args: T[]) {\n            const typeOptions = Object.assign({}, opts as PropOptions<T>)\n            let ret: VueTypeDef<T>\n            if (validate) {\n              ret = toValidableType<T>(name, typeOptions)\n            } else {\n              ret = toType<T>(name, typeOptions)\n            }\n\n            if (typeOptions.validator) {\n              ret.validator = typeOptions.validator.bind(ret, ...args)\n            }\n            return ret\n          },\n          enumerable: true,\n        }\n      }\n\n      return Object.defineProperty(this as T, name, descriptor)\n    }\n\n    static utils = {\n      validate<T, U>(value: T, type: U) {\n        return validateType<U, T>(type, value, true) === true\n      },\n      toType<T = unknown>(\n        name: string,\n        obj: PropOptions<T>,\n        validable = false,\n      ): VueTypeDef<T> | VueTypeValidableDef<T> {\n        return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n      },\n    }\n  })()\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes /*#__PURE__*/ extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n  config,\n}\n\nexport type VueTypesInterface = ReturnType<typeof createTypes>\nexport type { VueTypeDef, VueTypeValidableDef, VueTypeShape, VueTypeLooseShape }\n","import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n"],"names":["config","silent","logLevel","ObjProto","Object","prototype","toString","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","getType","fn","type","match","isPlainObject","_isPlainObject","warn","arg","has","obj","prop","call","isInteger","Number","value","isFinite","Math","floor","isArray","Array","isFunction","isVueTypeDef","isComplexType","some","k","bindTo","ctx","defineProperty","bind","validateType","typeToCheck","valid","expectedType","namePrefix","_vueTypes_name","undefined","required","map","join","constructor","getNativeType","msg","validator","oldWarn","warnLog","push","length","toType","name","defineProperties","writable","isRequired","get","this","def","assign","toValidableType","JSON","stringify","fromType","source","props","descriptors","copy","getOwnPropertyNames","forEach","key","getOwnPropertyDescriptor","rest","prevValidator","__original","indent","string","replace","any","func","Function","bool","Boolean","String","number","array","object","integer","symbol","custom","validatorFn","warnMsg","TypeError","oneOf","arr","allowedTypes","reduce","ret","v","constr","indexOf","oneOfType","hasCustomValidators","nativeChecks","i","concat","filter","t","typeProp","err","res","arrayOf","values","vResult","every","instanceOf","instanceConstructor","objectOf","keys","shape","requiredKeys","_obj$key","valueKeys","req","missing","_this","_vueTypes_isLoose","BaseVueTypes","extend","p","validate","getter","opts","descriptor","typeOptions","enumerable","defaults","sensibleDefaults","utils","validable","createTypes","defs","VueTypes"],"mappings":"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"}