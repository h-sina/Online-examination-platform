import { config } from './config';
import { VueTypesDefaults } from './types';
export { VueTypeDef, VueTypeValidableDef } from './types';
export { config };
declare type TypeShim = <T = any>(...args: any[]) => any;
export declare const any: TypeShim;
export declare const func: TypeShim;
export declare const bool: () => any;
export declare const string: TypeShim;
export declare const number: TypeShim;
export declare const array: TypeShim;
export declare const object: TypeShim;
export declare const symbol: () => any;
export declare const integer: TypeShim;
export declare const oneOf: TypeShim;
export declare const custom: TypeShim;
export declare const instanceOf: TypeShim;
export declare const oneOfType: TypeShim;
export declare const arrayOf: TypeShim;
export declare const objectOf: TypeShim;
export declare const shape: TypeShim;
export declare function fromType(name: string, source: any, props?: any): any;
export declare const toValidableType: <T>(name: string, props: any) => any;
export declare const toType: <T>(name: string, props: any) => any;
export declare function createTypes(defs?: Partial<VueTypesDefaults>): {
    new (): {};
    defaults: Partial<VueTypesDefaults>;
    sensibleDefaults: boolean | Partial<VueTypesDefaults>;
    config: import("./types").VueTypesConfig;
    readonly any: any;
    readonly func: any;
    readonly bool: any;
    readonly string: any;
    readonly number: any;
    readonly array: any;
    readonly object: any;
    readonly symbol: any;
    readonly integer: any;
    oneOf: TypeShim;
    custom: TypeShim;
    instanceOf: TypeShim;
    oneOfType: TypeShim;
    arrayOf: TypeShim;
    objectOf: TypeShim;
    shape: TypeShim;
    extend<T = any>(props: any): T;
    utils: {
        toType: (...args: any[]) => any;
        validate: (...args: any[]) => boolean;
    };
};
declare const VueTypes_base: {
    new (): {};
    defaults: Partial<VueTypesDefaults>;
    sensibleDefaults: boolean | Partial<VueTypesDefaults>;
    config: import("./types").VueTypesConfig;
    readonly any: any;
    readonly func: any;
    readonly bool: any;
    readonly string: any;
    readonly number: any;
    readonly array: any;
    readonly object: any;
    readonly symbol: any;
    readonly integer: any;
    oneOf: TypeShim;
    custom: TypeShim;
    instanceOf: TypeShim;
    oneOfType: TypeShim;
    arrayOf: TypeShim;
    objectOf: TypeShim;
    shape: TypeShim;
    extend<T = any>(props: any): T;
    utils: {
        toType: (...args: any[]) => any;
        validate: (...args: any[]) => boolean;
    };
};
export default class VueTypes/*#__PURE__*/  extends VueTypes_base {
}
