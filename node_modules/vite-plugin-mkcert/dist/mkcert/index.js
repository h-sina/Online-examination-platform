"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const process_1 = __importDefault(require("process"));
const picocolors_1 = __importDefault(require("picocolors"));
const logger_1 = require("../lib/logger");
const util_1 = require("../lib/util");
const downloader_1 = __importDefault(require("./downloader"));
const source_1 = require("./source");
const version_1 = __importDefault(require("./version"));
const config_1 = __importDefault(require("./config"));
const record_1 = __importDefault(require("./record"));
const KEY_FILE_PATH = (0, util_1.resolvePath)('certs/dev.key');
const CERT_FILE_PATH = (0, util_1.resolvePath)('certs/dev.pem');
class Mkcert {
    constructor(options) {
        this.getLatestHash = () => __awaiter(this, void 0, void 0, function* () {
            return {
                key: yield (0, util_1.getHash)(KEY_FILE_PATH),
                cert: yield (0, util_1.getHash)(CERT_FILE_PATH)
            };
        });
        const { force, autoUpgrade, source, mkcertPath, logger } = options;
        this.force = force;
        this.logger = logger;
        this.autoUpgrade = autoUpgrade;
        this.mkcertLocalPath = mkcertPath;
        this.sourceType = source || 'github';
        if (this.sourceType === 'github') {
            this.source = source_1.GithubSource.create();
        }
        else if (this.sourceType === 'coding') {
            this.source = source_1.CodingSource.create();
        }
        else {
            this.source = this.sourceType;
        }
        this.mkcertSavedPath = (0, util_1.resolvePath)(process_1.default.platform === 'win32' ? 'mkcert.exe' : 'mkcert');
        this.config = new config_1.default();
    }
    static create(options) {
        return new Mkcert(options);
    }
    getMkcertBinnary() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.checkMkcert())
                ? this.mkcertLocalPath || this.mkcertSavedPath
                : undefined;
        });
    }
    /**
     * Check if mkcert exists
     */
    checkMkcert() {
        return __awaiter(this, void 0, void 0, function* () {
            let exist;
            if (this.mkcertLocalPath) {
                exist = yield (0, util_1.exists)(this.mkcertLocalPath);
                this.logger.error(picocolors_1.default.red(`${this.mkcertLocalPath} does not exist, please check the mkcertPath paramter`));
            }
            else {
                exist = yield (0, util_1.exists)(this.mkcertSavedPath);
            }
            return exist;
        });
    }
    getCertificate() {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield fs_1.default.promises.readFile(KEY_FILE_PATH);
            const cert = yield fs_1.default.promises.readFile(CERT_FILE_PATH);
            return {
                key,
                cert
            };
        });
    }
    createCertificate(hosts) {
        return __awaiter(this, void 0, void 0, function* () {
            const names = hosts.join(' ');
            const mkcertBinnary = yield this.getMkcertBinnary();
            if (!mkcertBinnary) {
                (0, logger_1.debug)(`Mkcert does not exist, unable to generate certificate for ${names}`);
            }
            yield (0, util_1.ensureDirExist)(KEY_FILE_PATH);
            yield (0, util_1.ensureDirExist)(CERT_FILE_PATH);
            const cmd = `${(0, util_1.escape)(mkcertBinnary)} -install -key-file ${(0, util_1.escape)(KEY_FILE_PATH)} -cert-file ${(0, util_1.escape)(CERT_FILE_PATH)} ${names}`;
            yield (0, util_1.exec)(cmd, {
                env: Object.assign(Object.assign({}, process_1.default.env), { JAVA_HOME: undefined })
            });
            this.logger.info(`The certificate is saved in:\n${KEY_FILE_PATH}\n${CERT_FILE_PATH}`);
        });
    }
    regenerate(record, hosts) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.createCertificate(hosts);
            const hash = yield this.getLatestHash();
            record.update({ hosts, hash });
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.config.init();
            const exist = yield this.checkMkcert();
            if (!exist) {
                yield this.initMkcert();
            }
            else if (this.autoUpgrade) {
                yield this.upgradeMkcert();
            }
        });
    }
    getSourceInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceInfo = yield this.source.getSourceInfo();
            if (!sourceInfo) {
                if (typeof this.sourceType === 'string') {
                    this.logger.error('Failed to request mkcert information, please check your network');
                    if (this.sourceType === 'github') {
                        this.logger.info('If you are a user in china, maybe you should set "source" paramter to "coding"');
                    }
                }
                else {
                    this.logger.info('Please check your custom "source", it seems to return invalid result');
                }
                return undefined;
            }
            return sourceInfo;
        });
    }
    initMkcert() {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceInfo = yield this.getSourceInfo();
            (0, logger_1.debug)('The mkcert does not exist, download it now');
            if (!sourceInfo) {
                this.logger.error('Can not obtain download information of mkcert, init skipped');
                return;
            }
            yield this.downloadMkcert(sourceInfo.downloadUrl, this.mkcertSavedPath);
        });
    }
    upgradeMkcert() {
        return __awaiter(this, void 0, void 0, function* () {
            const versionManger = new version_1.default({ config: this.config });
            const sourceInfo = yield this.getSourceInfo();
            if (!sourceInfo) {
                this.logger.error('Can not obtain download information of mkcert, update skipped');
                return;
            }
            const versionInfo = versionManger.compare(sourceInfo.version);
            if (!versionInfo.shouldUpdate) {
                (0, logger_1.debug)('Mkcert is kept latest version, update skipped');
                return;
            }
            if (versionInfo.breakingChange) {
                (0, logger_1.debug)('The current version of mkcert is %s, and the latest version is %s, there may be some breaking changes, update skipped', versionInfo.currentVersion, versionInfo.nextVersion);
                return;
            }
            (0, logger_1.debug)('The current version of mkcert is %s, and the latest version is %s, mkcert will be updated', versionInfo.currentVersion, versionInfo.nextVersion);
            yield this.downloadMkcert(sourceInfo.downloadUrl, this.mkcertSavedPath);
            versionManger.update(versionInfo.nextVersion);
        });
    }
    downloadMkcert(sourceUrl, distPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const downloader = downloader_1.default.create();
            yield downloader.download(sourceUrl, distPath);
        });
    }
    renew(hosts) {
        return __awaiter(this, void 0, void 0, function* () {
            const record = new record_1.default({ config: this.config });
            if (this.force) {
                (0, logger_1.debug)(`Certificate is forced to regenerate`);
                yield this.regenerate(record, hosts);
            }
            if (!record.contains(hosts)) {
                (0, logger_1.debug)(`The hosts changed from [${record.getHosts()}] to [${hosts}], start regenerate certificate`);
                yield this.regenerate(record, hosts);
                return;
            }
            const hash = yield this.getLatestHash();
            if (record.tamper(hash)) {
                (0, logger_1.debug)(`The hash changed from ${(0, util_1.prettyLog)(record.getHash())} to ${(0, util_1.prettyLog)(hash)}, start regenerate certificate`);
                yield this.regenerate(record, hosts);
                return;
            }
            (0, logger_1.debug)('Neither hosts nor hash has changed, skip regenerate certificate');
        });
    }
    /**
     * Get certificates
     *
     * @param hosts host collection
     * @returns cretificates
     */
    install(hosts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (hosts.length) {
                yield this.renew(hosts);
            }
            return yield this.getCertificate();
        });
    }
}
exports.default = Mkcert;
//# sourceMappingURL=index.js.map