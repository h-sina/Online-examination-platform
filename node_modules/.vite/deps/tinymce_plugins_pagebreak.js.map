{
  "version": 3,
  "sources": ["../../tinymce/plugins/pagebreak/plugin.js", "../../tinymce/plugins/pagebreak/index.js", "dep:tinymce_plugins_pagebreak"],
  "sourcesContent": ["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.10.3 (2022-02-09)\n */\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var getSeparatorHtml = function (editor) {\n      return editor.getParam('pagebreak_separator', '<!-- pagebreak -->');\n    };\n    var shouldSplitBlock = function (editor) {\n      return editor.getParam('pagebreak_split_block', false);\n    };\n\n    var pageBreakClass = 'mce-pagebreak';\n    var getPlaceholderHtml = function (shouldSplitBlock) {\n      var html = '<img src=\"' + global.transparentSrc + '\" class=\"' + pageBreakClass + '\" data-mce-resize=\"false\" data-mce-placeholder />';\n      return shouldSplitBlock ? '<p>' + html + '</p>' : html;\n    };\n    var setup$1 = function (editor) {\n      var separatorHtml = getSeparatorHtml(editor);\n      var shouldSplitBlock$1 = function () {\n        return shouldSplitBlock(editor);\n      };\n      var pageBreakSeparatorRegExp = new RegExp(separatorHtml.replace(/[\\?\\.\\*\\[\\]\\(\\)\\{\\}\\+\\^\\$\\:]/g, function (a) {\n        return '\\\\' + a;\n      }), 'gi');\n      editor.on('BeforeSetContent', function (e) {\n        e.content = e.content.replace(pageBreakSeparatorRegExp, getPlaceholderHtml(shouldSplitBlock$1()));\n      });\n      editor.on('PreInit', function () {\n        editor.serializer.addNodeFilter('img', function (nodes) {\n          var i = nodes.length, node, className;\n          while (i--) {\n            node = nodes[i];\n            className = node.attr('class');\n            if (className && className.indexOf(pageBreakClass) !== -1) {\n              var parentNode = node.parent;\n              if (editor.schema.getBlockElements()[parentNode.name] && shouldSplitBlock$1()) {\n                parentNode.type = 3;\n                parentNode.value = separatorHtml;\n                parentNode.raw = true;\n                node.remove();\n                continue;\n              }\n              node.type = 3;\n              node.value = separatorHtml;\n              node.raw = true;\n            }\n          }\n        });\n      });\n    };\n\n    var register$1 = function (editor) {\n      editor.addCommand('mcePageBreak', function () {\n        editor.insertContent(getPlaceholderHtml(shouldSplitBlock(editor)));\n      });\n    };\n\n    var setup = function (editor) {\n      editor.on('ResolveName', function (e) {\n        if (e.target.nodeName === 'IMG' && editor.dom.hasClass(e.target, pageBreakClass)) {\n          e.name = 'pagebreak';\n        }\n      });\n    };\n\n    var register = function (editor) {\n      var onAction = function () {\n        return editor.execCommand('mcePageBreak');\n      };\n      editor.ui.registry.addButton('pagebreak', {\n        icon: 'page-break',\n        tooltip: 'Page break',\n        onAction: onAction\n      });\n      editor.ui.registry.addMenuItem('pagebreak', {\n        text: 'Page break',\n        icon: 'page-break',\n        onAction: onAction\n      });\n    };\n\n    function Plugin () {\n      global$1.add('pagebreak', function (editor) {\n        register$1(editor);\n        register(editor);\n        setup$1(editor);\n        setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n", "// Exports the \"pagebreak\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/pagebreak')\n//   ES2015:\n//     import 'tinymce/plugins/pagebreak'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/pagebreak/index.js\");"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAQA,IAAC,YAAY;AACT;AAEA,UAAI,WAAW,QAAQ,KAAK,MAAM,QAAQ,uBAAuB;AAEjE,UAAI,SAAS,QAAQ,KAAK,MAAM,QAAQ,aAAa;AAErD,UAAI,mBAAmB,SAAU,QAAQ;AACvC,eAAO,OAAO,SAAS,uBAAuB,oBAAoB;AAAA,MACpE;AACA,UAAI,mBAAmB,SAAU,QAAQ;AACvC,eAAO,OAAO,SAAS,yBAAyB,KAAK;AAAA,MACvD;AAEA,UAAI,iBAAiB;AACrB,UAAI,qBAAqB,SAAU,mBAAkB;AACnD,YAAI,OAAO,eAAe,OAAO,iBAAiB,cAAc,iBAAiB;AACjF,eAAO,oBAAmB,QAAQ,OAAO,SAAS;AAAA,MACpD;AACA,UAAI,UAAU,SAAU,QAAQ;AAC9B,YAAI,gBAAgB,iBAAiB,MAAM;AAC3C,YAAI,qBAAqB,WAAY;AACnC,iBAAO,iBAAiB,MAAM;AAAA,QAChC;AACA,YAAI,2BAA2B,IAAI,OAAO,cAAc,QAAQ,iCAAiC,SAAU,GAAG;AAC5G,iBAAO,OAAO;AAAA,QAChB,CAAC,GAAG,IAAI;AACR,eAAO,GAAG,oBAAoB,SAAU,GAAG;AACzC,YAAE,UAAU,EAAE,QAAQ,QAAQ,0BAA0B,mBAAmB,mBAAmB,CAAC,CAAC;AAAA,QAClG,CAAC;AACD,eAAO,GAAG,WAAW,WAAY;AAC/B,iBAAO,WAAW,cAAc,OAAO,SAAU,OAAO;AACtD,gBAAI,IAAI,MAAM,QAAQ,MAAM;AAC5B,mBAAO,KAAK;AACV,qBAAO,MAAM;AACb,0BAAY,KAAK,KAAK,OAAO;AAC7B,kBAAI,aAAa,UAAU,QAAQ,cAAc,MAAM,IAAI;AACzD,oBAAI,aAAa,KAAK;AACtB,oBAAI,OAAO,OAAO,iBAAiB,EAAE,WAAW,SAAS,mBAAmB,GAAG;AAC7E,6BAAW,OAAO;AAClB,6BAAW,QAAQ;AACnB,6BAAW,MAAM;AACjB,uBAAK,OAAO;AACZ;AAAA,gBACF;AACA,qBAAK,OAAO;AACZ,qBAAK,QAAQ;AACb,qBAAK,MAAM;AAAA,cACb;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAEA,UAAI,aAAa,SAAU,QAAQ;AACjC,eAAO,WAAW,gBAAgB,WAAY;AAC5C,iBAAO,cAAc,mBAAmB,iBAAiB,MAAM,CAAC,CAAC;AAAA,QACnE,CAAC;AAAA,MACH;AAEA,UAAI,QAAQ,SAAU,QAAQ;AAC5B,eAAO,GAAG,eAAe,SAAU,GAAG;AACpC,cAAI,EAAE,OAAO,aAAa,SAAS,OAAO,IAAI,SAAS,EAAE,QAAQ,cAAc,GAAG;AAChF,cAAE,OAAO;AAAA,UACX;AAAA,QACF,CAAC;AAAA,MACH;AAEA,UAAI,WAAW,SAAU,QAAQ;AAC/B,YAAI,WAAW,WAAY;AACzB,iBAAO,OAAO,YAAY,cAAc;AAAA,QAC1C;AACA,eAAO,GAAG,SAAS,UAAU,aAAa;AAAA,UACxC,MAAM;AAAA,UACN,SAAS;AAAA,UACT;AAAA,QACF,CAAC;AACD,eAAO,GAAG,SAAS,YAAY,aAAa;AAAA,UAC1C,MAAM;AAAA,UACN,MAAM;AAAA,UACN;AAAA,QACF,CAAC;AAAA,MACH;AAEA,wBAAmB;AACjB,iBAAS,IAAI,aAAa,SAAU,QAAQ;AAC1C,qBAAW,MAAM;AACjB,mBAAS,MAAM;AACf,kBAAQ,MAAM;AACd,gBAAM,MAAM;AAAA,QACd,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,IAEX,GAAE;AAAA;AAAA;;;ACvGF;AAAA;AAAA;AAMA;AAAA;AAAA;;;ACNA;AAAA,IAAO,oCAAQ;",
  "names": []
}
