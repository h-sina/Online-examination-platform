import {
  require_logic_flow
} from "./chunk-Q7UGIIYR.js";
import {
  __toESM,
  init_define_APP_INFO
} from "./chunk-QUQ4DCVH.js";

// dep:@logicflow_extension
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/index.js
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/bpmn/index.js
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/bpmn/events/StartEvent.js
init_define_APP_INFO();
var import_core = __toESM(require_logic_flow());

// node_modules/@logicflow/extension/es/bpmn/getBpmnId.js
init_define_APP_INFO();

// node_modules/ids/dist/index.esm.js
init_define_APP_INFO();
function createCommonjsModule(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}
var hat_1 = createCommonjsModule(function(module) {
  var hat = module.exports = function(bits, base) {
    if (!base)
      base = 16;
    if (bits === void 0)
      bits = 128;
    if (bits <= 0)
      return "0";
    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
    for (var i2 = 2; digits === Infinity; i2 *= 2) {
      digits = Math.log(Math.pow(2, bits / i2)) / Math.log(base) * i2;
    }
    var rem = digits - Math.floor(digits);
    var res = "";
    for (var i2 = 0; i2 < Math.floor(digits); i2++) {
      var x2 = Math.floor(Math.random() * base).toString(base);
      res = x2 + res;
    }
    if (rem) {
      var b2 = Math.pow(base, rem);
      var x2 = Math.floor(Math.random() * b2).toString(base);
      res = x2 + res;
    }
    var parsed = parseInt(res, base);
    if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
      return hat(bits, base);
    } else
      return res;
  };
  hat.rack = function(bits, base, expandBy) {
    var fn = function(data) {
      var iters = 0;
      do {
        if (iters++ > 10) {
          if (expandBy)
            bits += expandBy;
          else
            throw new Error("too many ID collisions, use more bits");
        }
        var id = hat(bits, base);
      } while (Object.hasOwnProperty.call(hats, id));
      hats[id] = data;
      return id;
    };
    var hats = fn.hats = {};
    fn.get = function(id) {
      return fn.hats[id];
    };
    fn.set = function(id, value) {
      fn.hats[id] = value;
      return fn;
    };
    fn.bits = bits || 128;
    fn.base = base || 16;
    return fn;
  };
});
function Ids(seed) {
  if (!(this instanceof Ids)) {
    return new Ids(seed);
  }
  seed = seed || [128, 36, 1];
  this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
}
Ids.prototype.next = function(element) {
  return this._seed(element || true);
};
Ids.prototype.nextPrefixed = function(prefix, element) {
  var id;
  do {
    id = prefix + this.next(true);
  } while (this.assigned(id));
  this.claim(id, element);
  return id;
};
Ids.prototype.claim = function(id, element) {
  this._seed.set(id, element || true);
};
Ids.prototype.assigned = function(id) {
  return this._seed.get(id) || false;
};
Ids.prototype.unclaim = function(id) {
  delete this._seed.hats[id];
};
Ids.prototype.clear = function() {
  var hats = this._seed.hats, id;
  for (id in hats) {
    this.unclaim(id);
  }
};
var index_esm_default = Ids;

// node_modules/@logicflow/extension/es/bpmn/getBpmnId.js
var ids = new index_esm_default([32, 32, 1]);
function getBpmnId() {
  return ids.next();
}

// node_modules/@logicflow/extension/es/bpmn/events/StartEvent.js
var __extends = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var StartEventModel = function(_super) {
  __extends(StartEventModel2, _super);
  function StartEventModel2(data, graphModel) {
    var _this = this;
    if (!data.id) {
      data.id = "Event_" + getBpmnId();
    }
    if (!data.text) {
      data.text = "";
    }
    if (data.text && typeof data.text === "string") {
      data.text = {
        value: data.text,
        x: data.x,
        y: data.y + 40
      };
    }
    _this = _super.call(this, data, graphModel) || this;
    return _this;
  }
  StartEventModel2.prototype.setAttributes = function() {
    this.r = 18;
  };
  StartEventModel2.prototype.getConnectedTargetRules = function() {
    var rules = _super.prototype.getConnectedTargetRules.call(this);
    var notAsTarget = {
      message: "\u8D77\u59CB\u8282\u70B9\u4E0D\u80FD\u4F5C\u4E3A\u8FB9\u7684\u7EC8\u70B9",
      validate: function() {
        return false;
      }
    };
    rules.push(notAsTarget);
    return rules;
  };
  StartEventModel2.extendKey = "StartEventModel";
  return StartEventModel2;
}(import_core.CircleNodeModel);
var StartEventView = function(_super) {
  __extends(StartEventView2, _super);
  function StartEventView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  StartEventView2.extendKey = "StartEventNode";
  return StartEventView2;
}(import_core.CircleNode);
var StartEvent = {
  type: "bpmn:startEvent",
  view: StartEventView,
  model: StartEventModel
};
var StartEvent_default = StartEvent;

// node_modules/@logicflow/extension/es/bpmn/events/EndEvent.js
init_define_APP_INFO();
var import_core2 = __toESM(require_logic_flow());
var __extends2 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
var EndEventModel = function(_super) {
  __extends2(EndEventModel2, _super);
  function EndEventModel2(data, graphModel) {
    var _this = this;
    if (!data.id) {
      data.id = "Event_" + getBpmnId();
    }
    if (!data.text) {
      data.text = "";
    }
    if (data.text && typeof data.text === "string") {
      data.text = {
        value: data.text,
        x: data.x,
        y: data.y + 40
      };
    }
    _this = _super.call(this, data, graphModel) || this;
    return _this;
  }
  EndEventModel2.prototype.setAttributes = function() {
    this.r = 18;
  };
  EndEventModel2.prototype.getConnectedSourceRules = function() {
    var rules = _super.prototype.getConnectedSourceRules.call(this);
    var notAsSource = {
      message: "\u7ED3\u675F\u8282\u70B9\u4E0D\u80FD\u4F5C\u4E3A\u8FB9\u7684\u8D77\u70B9",
      validate: function() {
        return false;
      }
    };
    rules.push(notAsSource);
    return rules;
  };
  EndEventModel2.extendKey = "EndEventModel";
  return EndEventModel2;
}(import_core2.CircleNodeModel);
var EndEventView = function(_super) {
  __extends2(EndEventView2, _super);
  function EndEventView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  EndEventView2.prototype.getAnchorStyle = function() {
    return {
      visibility: "hidden"
    };
  };
  EndEventView2.prototype.getShape = function() {
    var model = this.props.model;
    var style = model.getNodeStyle();
    var x2 = model.x, y2 = model.y, r2 = model.r;
    var outCircle = _super.prototype.getShape.call(this);
    return (0, import_core2.h)("g", {}, outCircle, (0, import_core2.h)("circle", __assign(__assign({}, style), { cx: x2, cy: y2, r: r2 - 5 })));
  };
  EndEventView2.extendKey = "EndEventView";
  return EndEventView2;
}(import_core2.CircleNode);
var EndEvent = {
  type: "bpmn:endEvent",
  view: EndEventView,
  model: EndEventModel
};
var EndEvent_default = EndEvent;

// node_modules/@logicflow/extension/es/bpmn/gateways/ExclusiveGateway.js
init_define_APP_INFO();
var import_core3 = __toESM(require_logic_flow());
var __extends3 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign2.apply(this, arguments);
};
var ExclusiveGatewayModel = function(_super) {
  __extends3(ExclusiveGatewayModel2, _super);
  function ExclusiveGatewayModel2(data, graphModel) {
    var _this = this;
    if (!data.id) {
      data.id = "Gateway_" + getBpmnId();
    }
    if (!data.text) {
      data.text = "";
    }
    if (data.text && typeof data.text === "string") {
      data.text = {
        value: data.text,
        x: data.x,
        y: data.y + 40
      };
    }
    _this = _super.call(this, data, graphModel) || this;
    _this.points = [
      [25, 0],
      [50, 25],
      [25, 50],
      [0, 25]
    ];
    return _this;
  }
  ExclusiveGatewayModel2.extendKey = "ExclusiveGatewayModel";
  return ExclusiveGatewayModel2;
}(import_core3.PolygonNodeModel);
var ExclusiveGatewayView = function(_super) {
  __extends3(ExclusiveGatewayView2, _super);
  function ExclusiveGatewayView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ExclusiveGatewayView2.prototype.getShape = function() {
    var model = this.props.model;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height, points = model.points;
    var style = model.getNodeStyle();
    return (0, import_core3.h)("g", {
      transform: "matrix(1 0 0 1 " + (x2 - width / 2) + " " + (y2 - height / 2) + ")"
    }, (0, import_core3.h)("polygon", __assign2(__assign2({}, style), {
      x: x2,
      y: y2,
      points
    })), (0, import_core3.h)("path", __assign2({ d: "m 16,15 7.42857142857143,9.714285714285715 -7.42857142857143,9.714285714285715 3.428571428571429,0 5.714285714285715,-7.464228571428572 5.714285714285715,7.464228571428572 3.428571428571429,0 -7.42857142857143,-9.714285714285715 7.42857142857143,-9.714285714285715 -3.428571428571429,0 -5.714285714285715,7.464228571428572 -5.714285714285715,-7.464228571428572 -3.428571428571429,0 z" }, style)));
  };
  ExclusiveGatewayView2.extendKey = "ExclusiveGatewayNode";
  return ExclusiveGatewayView2;
}(import_core3.PolygonNode);
var ExclusiveGateway = {
  type: "bpmn:exclusiveGateway",
  view: ExclusiveGatewayView,
  model: ExclusiveGatewayModel
};
var ExclusiveGateway_default = ExclusiveGateway;

// node_modules/@logicflow/extension/es/bpmn/tasks/UserTask.js
init_define_APP_INFO();
var import_core4 = __toESM(require_logic_flow());
var __extends4 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign3.apply(this, arguments);
};
var UserTaskModel = function(_super) {
  __extends4(UserTaskModel2, _super);
  function UserTaskModel2(data, graphModel) {
    var _this = this;
    if (!data.id) {
      data.id = "Activity_" + getBpmnId();
    }
    _this = _super.call(this, data, graphModel) || this;
    return _this;
  }
  UserTaskModel2.extendKey = "UserTaskModel";
  return UserTaskModel2;
}(import_core4.RectNodeModel);
var UserTaskView = function(_super) {
  __extends4(UserTaskView2, _super);
  function UserTaskView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  UserTaskView2.prototype.getLabelShape = function() {
    var model = this.props.model;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height;
    var style = model.getNodeStyle();
    return (0, import_core4.h)("svg", {
      x: x2 - width / 2 + 5,
      y: y2 - height / 2 + 5,
      width: 25,
      height: 25,
      viewBox: "0 0 1274 1024"
    }, (0, import_core4.h)("path", {
      fill: style.stroke,
      d: "M655.807326 287.35973m-223.989415 0a218.879 218.879 0 1 0 447.978829 0 218.879 218.879 0 1 0-447.978829 0ZM1039.955839 895.482975c-0.490184-212.177424-172.287821-384.030443-384.148513-384.030443-211.862739 0-383.660376 171.85302-384.15056 384.030443L1039.955839 895.482975z"
    }));
  };
  UserTaskView2.prototype.getShape = function() {
    var model = this.props.model;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height, radius = model.radius;
    var style = model.getNodeStyle();
    return (0, import_core4.h)("g", {}, [
      (0, import_core4.h)("rect", __assign3(__assign3({}, style), {
        x: x2 - width / 2,
        y: y2 - height / 2,
        rx: radius,
        ry: radius,
        width,
        height
      })),
      this.getLabelShape()
    ]);
  };
  UserTaskView2.extendKey = "UserTaskNode";
  return UserTaskView2;
}(import_core4.RectNode);
var UserTask = {
  type: "bpmn:userTask",
  view: UserTaskView,
  model: UserTaskModel
};
var UserTask_default = UserTask;

// node_modules/@logicflow/extension/es/bpmn/tasks/ServiceTask.js
init_define_APP_INFO();
var import_core5 = __toESM(require_logic_flow());
var __extends5 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign4 = function() {
  __assign4 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign4.apply(this, arguments);
};
var ServiceTaskModel = function(_super) {
  __extends5(ServiceTaskModel2, _super);
  function ServiceTaskModel2(data, graphModel) {
    var _this = this;
    if (!data.id) {
      data.id = "Activity_" + getBpmnId();
    }
    _this = _super.call(this, data, graphModel) || this;
    return _this;
  }
  ServiceTaskModel2.extendKey = "ServiceTaskModel";
  return ServiceTaskModel2;
}(import_core5.RectNodeModel);
var ServiceTaskView = function(_super) {
  __extends5(ServiceTaskView2, _super);
  function ServiceTaskView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ServiceTaskView2.prototype.getLabelShape = function() {
    var model = this.props.model;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height;
    var style = model.getNodeStyle();
    return (0, import_core5.h)("svg", {
      x: x2 - width / 2 + 5,
      y: y2 - height / 2 + 5,
      width: 30,
      height: 30,
      viewBox: "0 0 1274 1024"
    }, (0, import_core5.h)("path", {
      fill: style.stroke,
      d: "M882.527918 434.149934c-2.234901-5.303796-7.311523-8.853645-13.059434-9.138124l-61.390185-3.009544c-6.635117-20.973684-15.521508-41.175795-26.513864-60.282968l42.051745-47.743374c4.308119-4.889357 4.955872-12.004405 1.602498-17.59268-46.384423-77.30362-103.969956-101.422947-106.400309-102.410438-5.332449-2.170432-11.432377-1.090844-15.693424 2.77009L654.674467 240.664222c-17.004279-8.654101-35.092239-15.756869-53.995775-21.210068l-3.26537-66.490344c-0.280386-5.747911-3.833305-10.824533-9.134031-13.059434-1.683339-0.709151-30.193673-12.391215-76.866668-12.051477-46.672996-0.339738-75.18333 11.342326-76.866668 12.051477-5.300726 2.234901-8.853645 7.311523-9.134031 13.059434l-3.26537 66.490344c-18.903535 5.453199-36.991496 12.555967-53.995775 21.210068l-48.450479-43.922349c-4.261047-3.860934-10.360975-4.940522-15.693424-2.77009-2.430352 0.98749-60.015885 25.106818-106.400309 102.410438-3.353374 5.588275-2.705622 12.703323 1.602498 17.59268l42.051745 47.743374c-10.992355 19.107173-19.878746 39.309284-26.513864 60.282968l-61.390185 3.009544c-5.747911 0.284479-10.824533 3.834328-13.059434 9.138124-1.01512 2.415003-24.687262 60.190871-2.822278 147.651828 1.583055 6.324032 7.072069 10.893094 13.57518 11.308557 5.892197 0.37146 11.751648 0.523933 17.419741 0.667196 14.498202 0.372483 28.193109 0.723477 40.908712 4.63353 4.212952 1.294482 6.435573 8.270361 9.349949 18.763342 1.287319 4.640694 2.617617 9.43693 4.484128 14.010085 1.794879 4.393054 3.75758 8.570189 5.66093 12.607132 1.302669 2.765997 2.529613 5.380544 3.689019 8.018627 2.986007 6.803963 2.682086 9.773598 2.578732 10.349719-3.061732 3.672646-6.391571 7.238868-9.91379 11.015891-1.810229 1.943258-3.680832 3.949962-5.523807 5.980201l-22.560832 24.8909c-3.865028 4.261047-4.940522 10.365068-2.774183 15.693424 0.991584 2.426259 25.102724 60.011792 102.414531 106.400309 5.588275 3.353374 12.703323 2.701528 17.591657-1.603521l23.476691-20.682042c2.346441-2.061962 4.64888-4.336772 6.875594-6.534833 9.05319-8.93858 14.018272-12.95608 17.73185-11.576663 3.305279 1.222851 6.907317 3.166109 10.720156 5.228071 3.325745 1.794879 6.764054 3.650133 10.465352 5.288446 6.016017 2.662643 12.120039 4.688789 18.019399 6.65149 6.827499 2.266623 13.279445 4.409426 18.819624 7.275707 1.518586 0.782829 1.926886 0.994654 2.358721 7.830339 0.726547 11.496845 1.25048 23.276123 1.753947 34.672684 0.264013 5.900384 0.528026 11.803837 0.815575 17.700127 0.284479 5.743818 3.833305 10.82044 9.138124 13.05534 1.654686 0.698918 29.371958 12.063757 74.869175 12.063757 0.328481 0 3.65832 0 3.986801 0 45.497217 0 73.214489-11.364839 74.869175-12.063757 5.304819-2.234901 8.853645-7.311523 9.138124-13.05534 0.287549-5.89629 0.551562-11.799744 0.815575-17.700127 0.503467-11.396561 1.027399-23.175839 1.753947-34.672684 0.431835-6.835685 0.840134-7.04751 2.358721-7.830339 5.54018-2.866281 11.992125-5.009084 18.819624-7.275707 5.89936-1.962701 12.003382-3.988848 18.019399-6.65149 3.701299-1.638313 7.139607-3.493567 10.465352-5.288446 3.812839-2.061962 7.414877-4.00522 10.720156-5.228071 3.713578-1.379417 8.67866 2.638083 17.73185 11.576663 2.226714 2.198062 4.529153 4.472871 6.875594 6.534833l23.476691 20.682042c4.888334 4.305049 12.003382 4.956895 17.591657 1.603521 77.311807-46.388517 101.422947-103.97405 102.414531-106.400309 2.166339-5.328355 1.090844-11.432377-2.774183-15.693424l-22.560832-24.8909c-1.842974-2.030239-3.713578-4.036943-5.523807-5.980201-3.52222-3.777023-6.852058-7.343245-9.91379-11.015891-0.103354-0.576121-0.407276-3.545756 2.578732-10.349719 1.159406-2.638083 2.38635-5.252631 3.689019-8.018627 1.90335-4.036943 3.866051-8.214079 5.66093-12.607132 1.866511-4.573155 3.196809-9.369392 4.484128-14.010085 2.914376-10.492982 5.136997-17.46886 9.349949-18.763342 12.715603-3.910053 26.41051-4.261047 40.908712-4.63353 5.668093-0.143263 11.527544-0.295735 17.419741-0.667196 6.503111-0.415462 11.992125-4.984524 13.57518-11.308557C907.21518 494.340805 883.543038 436.564937 882.527918 434.149934zM643.49894 643.761929c-35.280528 35.280528-82.191954 54.711066-132.086317 54.711066s-96.806813-19.430538-132.086317-54.711066c-35.280528-35.279504-54.711066-82.191954-54.711066-132.086317 0-49.894364 19.430538-96.80272 54.711066-132.082224 35.283598-35.284621 82.191954-54.711066 132.086317-54.711066s96.80579 19.426445 132.086317 54.711066c35.279504 35.279504 54.711066 82.187861 54.711066 132.082224C698.210006 561.569976 678.782537 608.482425 643.49894 643.761929z"
    }));
  };
  ServiceTaskView2.prototype.getShape = function() {
    var model = this.props.model;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height, radius = model.radius;
    var style = model.getNodeStyle();
    return (0, import_core5.h)("g", {}, [
      (0, import_core5.h)("rect", __assign4({
        x: x2 - width / 2,
        y: y2 - height / 2,
        rx: radius,
        ry: radius,
        width,
        height
      }, style)),
      this.getLabelShape()
    ]);
  };
  ServiceTaskView2.extendKey = "ServiceTaskNode";
  return ServiceTaskView2;
}(import_core5.RectNode);
var ServiceTask = {
  type: "bpmn:serviceTask",
  view: ServiceTaskView,
  model: ServiceTaskModel
};
var ServiceTask_default = ServiceTask;

// node_modules/@logicflow/extension/es/bpmn/flow/SequenceFlow.js
init_define_APP_INFO();
var import_core6 = __toESM(require_logic_flow());
var __extends6 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var SequenceFlowModel = function(_super) {
  __extends6(SequenceFlowModel2, _super);
  function SequenceFlowModel2(data, graphModel) {
    var _this = this;
    if (!data.id) {
      data.id = "Flow_" + getBpmnId();
    }
    _this = _super.call(this, data, graphModel) || this;
    return _this;
  }
  SequenceFlowModel2.extendKey = "SequenceFlowModel";
  return SequenceFlowModel2;
}(import_core6.PolylineEdgeModel);
var SequenceFlowView = function(_super) {
  __extends6(SequenceFlowView2, _super);
  function SequenceFlowView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SequenceFlowView2.extendKey = "SequenceFlowEdge";
  return SequenceFlowView2;
}(import_core6.PolylineEdge);
var SequenceFlow = {
  type: "bpmn:sequenceFlow",
  view: SequenceFlowView,
  model: SequenceFlowModel
};
var SequenceFlow_default = SequenceFlow;

// node_modules/@logicflow/extension/es/bpmn/constant.js
init_define_APP_INFO();
var StartEventConfig = {
  width: 40,
  height: 40
};
var EndEventConfig = {
  width: 40,
  height: 40
};
var ExclusiveGatewayConfig = {
  width: 40,
  height: 40
};
var ServiceTaskConfig = {
  width: 100,
  height: 80
};
var UserTaskConfig = {
  width: 100,
  height: 80
};
var theme = {
  rect: {
    radius: 5,
    stroke: "rgb(24, 125, 255)"
  },
  circle: {
    r: 18,
    stroke: "rgb(24, 125, 255)"
  },
  polygon: {
    stroke: "rgb(24, 125, 255)"
  },
  polyline: {
    stroke: "rgb(24, 125, 255)",
    hoverStroke: "rgb(24, 125, 255)",
    selectedStroke: "rgb(24, 125, 255)"
  },
  edgeText: {
    background: {
      fill: "white",
      height: 14,
      stroke: "transparent",
      radius: 3
    }
  }
};

// node_modules/@logicflow/extension/es/bpmn/index.js
var BpmnElement = function() {
  function BpmnElement2(_a) {
    var lf = _a.lf;
    lf.setTheme(theme);
    lf.register(StartEvent_default);
    lf.register(EndEvent_default);
    lf.register(ExclusiveGateway_default);
    lf.register(UserTask_default);
    lf.register(ServiceTask_default);
    if (!lf.options.customBpmnEdge) {
      lf.register(SequenceFlow_default);
      lf.setDefaultEdgeType("bpmn:sequenceFlow");
    }
  }
  BpmnElement2.pluginName = "bpmnElement";
  return BpmnElement2;
}();

// node_modules/@logicflow/extension/es/tools/snapshot/index.js
init_define_APP_INFO();
var Snapshot = {
  pluginName: "snapshot",
  install: function(lf) {
    var _this = this;
    this.lf = lf;
    lf.getSnapshot = function(fileName, backgroundColor) {
      _this.offsetX = Number.MAX_SAFE_INTEGER;
      _this.offsetY = Number.MAX_SAFE_INTEGER;
      _this.fileName = fileName || "logic-flow." + Date.now() + ".png";
      var svgRootElement = _this.getSvgRootElement(lf);
      _this.downloadSvg(svgRootElement, _this.fileName, backgroundColor);
    };
    lf.getSnapshotBlob = function(backgroundColor) {
      _this.offsetX = Number.MAX_SAFE_INTEGER;
      _this.offsetY = Number.MAX_SAFE_INTEGER;
      var svgRootElement = _this.getSvgRootElement(lf);
      return _this.getBlob(svgRootElement, backgroundColor);
    };
    lf.getSnapshotBase64 = function(backgroundColor) {
      _this.offsetX = Number.MAX_SAFE_INTEGER;
      _this.offsetY = Number.MAX_SAFE_INTEGER;
      var svgRootElement = _this.getSvgRootElement(lf);
      return _this.getBase64(svgRootElement, backgroundColor);
    };
  },
  getSvgRootElement: function(lf) {
    var _this = this;
    lf.graphModel.nodes.forEach(function(item) {
      var x2 = item.x, width = item.width, y2 = item.y, height = item.height;
      var offsetX = x2 - width / 2;
      var offsetY = y2 - height / 2;
      if (offsetX < _this.offsetX) {
        _this.offsetX = offsetX - 5;
      }
      if (offsetY < _this.offsetY) {
        _this.offsetY = offsetY - 5;
      }
    });
    lf.graphModel.edges.forEach(function(edge) {
      if (edge.pointsList) {
        edge.pointsList.forEach(function(point) {
          var x2 = point.x, y2 = point.y;
          if (x2 < _this.offsetX) {
            _this.offsetX = x2 - 5;
          }
          if (y2 < _this.offsetY) {
            _this.offsetY = y2 - 5;
          }
        });
      }
    });
    var svgRootElement = lf.container.querySelector(".lf-canvas-overlay");
    return svgRootElement;
  },
  triggerDownload: function(imgURI) {
    var evt = new MouseEvent("click", {
      view: window,
      bubbles: false,
      cancelable: true
    });
    var a2 = document.createElement("a");
    a2.setAttribute("download", this.fileName);
    a2.setAttribute("href", imgURI);
    a2.setAttribute("target", "_blank");
    a2.dispatchEvent(evt);
  },
  removeAnchor: function(element) {
    var childNodes = element.childNodes;
    var childLength = element.childNodes && element.childNodes.length;
    for (var i2 = 0; i2 < childLength; i2++) {
      var child = childNodes[i2];
      var classList = child.classList && Array.from(child.classList) || [];
      if (classList.indexOf("lf-anchor") > -1) {
        element.removeChild(element.childNodes[i2]);
        childLength--;
        i2--;
      }
    }
  },
  downloadSvg: function(svg, fileName, backgroundColor) {
    var _this = this;
    this.getCanvasData(svg, backgroundColor).then(function(canvas) {
      var imgURI = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
      _this.triggerDownload(imgURI, fileName);
    });
  },
  getBase64: function(svg, backgroundColor) {
    var _this = this;
    return new Promise(function(resolve) {
      _this.getCanvasData(svg, backgroundColor).then(function(canvas) {
        var base64 = canvas.toDataURL("image/png");
        resolve({ data: base64, width: canvas.width, height: canvas.height });
      });
    });
  },
  getBlob: function(svg, backgroundColor) {
    var _this = this;
    return new Promise(function(resolve) {
      _this.getCanvasData(svg, backgroundColor).then(function(canvas) {
        canvas.toBlob(function(blob) {
          resolve({ data: blob, width: canvas.width, height: canvas.height });
        }, "image/png");
      });
    });
  },
  getClassRules: function() {
    var rules = "";
    var styleSheets = document.styleSheets;
    for (var i2 = 0; i2 < styleSheets.length; i2++) {
      var sheet = styleSheets[i2];
      for (var j2 = 0; j2 < sheet.cssRules.length; j2++) {
        rules += sheet.cssRules[j2].cssText;
      }
    }
    return rules;
  },
  getCanvasData: function(svg, backgroundColor) {
    var _this = this;
    var copy = svg.cloneNode(true);
    var graph = copy.lastChild;
    var childLength = graph.childNodes && graph.childNodes.length;
    if (childLength) {
      for (var i2 = 0; i2 < childLength; i2++) {
        var lfLayer = graph.childNodes[i2];
        var layerClassList = lfLayer.classList && Array.from(lfLayer.classList);
        if (layerClassList && layerClassList.indexOf("lf-base") < 0) {
          graph.removeChild(graph.childNodes[i2]);
          childLength--;
          i2--;
        } else {
          var lfBase = graph.childNodes[i2];
          lfBase && lfBase.childNodes.forEach(function(item) {
            var element = item;
            _this.removeAnchor(element.firstChild);
          });
        }
      }
    }
    copy.lastChild.style.transform = "matrix(1, 0, 0, 1, " + (-this.offsetX + 10) + ", " + (-this.offsetY + 10) + ")";
    var dpr = window.devicePixelRatio || 1;
    var canvas = document.createElement("canvas");
    var base = document.getElementsByClassName("lf-base")[0];
    var bbox = base.getBoundingClientRect();
    var graphModel = this.lf.graphModel;
    var transformModel = graphModel.transformModel;
    var SCALE_X = transformModel.SCALE_X, SCALE_Y = transformModel.SCALE_Y;
    var bboxWidth = Math.ceil(bbox.width / SCALE_X);
    var bboxHeight = Math.ceil(bbox.height / SCALE_Y);
    canvas.style.width = bboxWidth + "px";
    canvas.style.height = bboxHeight + "px";
    canvas.width = bboxWidth * dpr + 80;
    canvas.height = bboxHeight * dpr + 80;
    var ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.scale(dpr, dpr);
    if (backgroundColor) {
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(0, 0, bboxWidth * dpr + 80, bboxHeight * dpr + 80);
    } else {
      ctx.clearRect(0, 0, bboxWidth, bboxHeight);
    }
    var img = new Image();
    var style = document.createElement("style");
    style.innerHTML = this.getClassRules();
    var foreignObject = document.createElement("foreignObject");
    foreignObject.appendChild(style);
    copy.appendChild(foreignObject);
    return new Promise(function(resolve) {
      img.onload = function() {
        ctx.drawImage(img, 0, 0);
        resolve(canvas);
      };
      var svg2Img = "data:image/svg+xml;charset=utf-8," + new XMLSerializer().serializeToString(copy);
      var imgSrc = svg2Img.replace(/\n/g, "").replace(/\t/g, "").replace(/#/g, "%23");
      img.src = imgSrc;
    });
  }
};

// node_modules/@logicflow/extension/es/bpmn-adapter/index.js
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/bpmn-adapter/bpmnIds.js
init_define_APP_INFO();
var ids2 = new index_esm_default([32, 32, 1]);
function getBpmnId2() {
  return ids2.next();
}

// node_modules/@logicflow/extension/es/bpmn-adapter/json2xml.js
init_define_APP_INFO();
function addIndSpace(ind, deep) {
  for (var i2 = 0; i2 < deep; i2++) {
    ind += "  ";
  }
  return ind;
}
function toXml(v2, name, ind, deep) {
  var xml = "";
  if (v2 instanceof Array) {
    for (var i2 = 0, n2 = v2.length; i2 < n2; i2++) {
      xml += addIndSpace(ind, deep) + toXml(v2[i2], name, ind, deep + 1);
    }
  } else if (typeof v2 == "object") {
    var hasChild = false;
    xml += addIndSpace(ind, deep) + "<" + name;
    for (var m2 in v2) {
      if (m2.charAt(0) == "-")
        xml += " " + m2.substr(1) + '="' + v2[m2].toString() + '"';
      else
        hasChild = true;
    }
    xml += hasChild ? ">" : " />";
    if (hasChild) {
      for (var m2 in v2) {
        if (m2 == "#text")
          xml += v2[m2];
        else if (m2 == "#cdata")
          xml += "<![CDATA[" + v2[m2] + "]]>";
        else if (m2.charAt(0) != "-")
          xml += toXml(v2[m2], m2, ind, deep + 1);
      }
      xml += addIndSpace(ind, deep) + "</" + name + ">";
    } else {
    }
  } else {
    xml += addIndSpace(ind, deep) + "<" + name + ">" + v2.toString() + "</" + name + ">";
  }
  return xml;
}
function lfJson2Xml(o2) {
  var xmlStr = "";
  for (var m2 in o2) {
    xmlStr += toXml(o2[m2], m2, "	\n", 0);
  }
  return xmlStr;
}

// node_modules/@logicflow/extension/es/bpmn-adapter/xml2json.js
init_define_APP_INFO();
var XML = function() {
};
XML.ObjTree = function() {
  return this;
};
XML.ObjTree.VERSION = "0.23";
XML.ObjTree.prototype.xmlDecl = '<?xml version="1.0" encoding="UTF-8" ?>\n';
XML.ObjTree.prototype.attr_prefix = "-";
XML.ObjTree.prototype.parseXML = function(xml) {
  var root;
  if (window.DOMParser) {
    var xmldom = new DOMParser();
    var dom = xmldom.parseFromString(xml, "application/xml");
    if (!dom)
      return;
    root = dom.documentElement;
  } else if (window.ActiveXObject) {
    xmldom = new ActiveXObject("Microsoft.XMLDOM");
    xmldom.async = false;
    xmldom.loadXML(xml);
    root = xmldom.documentElement;
  }
  if (!root)
    return;
  return this.parseDOM(root);
};
XML.ObjTree.prototype.parseHTTP = function(url, options, callback) {
  var myopt = {};
  for (var key in options) {
    myopt[key] = options[key];
  }
  if (!myopt.method) {
    if (typeof myopt.postBody == "undefined" && typeof myopt.postbody == "undefined" && typeof myopt.parameters == "undefined") {
      myopt.method = "get";
    } else {
      myopt.method = "post";
    }
  }
  if (callback) {
    myopt.asynchronous = true;
    var __this = this;
    var __func = callback;
    var __save = myopt.onComplete;
    myopt.onComplete = function(trans2) {
      var tree;
      if (trans2 && trans2.responseXML && trans2.responseXML.documentElement) {
        tree = __this.parseDOM(trans2.responseXML.documentElement);
      }
      __func(tree, trans2);
      if (__save)
        __save(trans2);
    };
  } else {
    myopt.asynchronous = false;
  }
  var trans;
  if (typeof HTTP != "undefined" && HTTP.Request) {
    myopt.uri = url;
    var req = new HTTP.Request(myopt);
    if (req)
      trans = req.transport;
  } else if (typeof Ajax != "undefined" && Ajax.Request) {
    var req = new Ajax.Request(url, myopt);
    if (req)
      trans = req.transport;
  }
  if (callback)
    return trans;
  if (trans && trans.responseXML && trans.responseXML.documentElement) {
    return this.parseDOM(trans.responseXML.documentElement);
  }
};
XML.ObjTree.prototype.parseDOM = function(root) {
  if (!root)
    return;
  this.__force_array = {};
  if (this.force_array) {
    for (var i2 = 0; i2 < this.force_array.length; i2++) {
      this.__force_array[this.force_array[i2]] = 1;
    }
  }
  var json = this.parseElement(root);
  if (this.__force_array[root.nodeName]) {
    json = [json];
  }
  if (root.nodeType != 11) {
    var tmp = {};
    tmp[root.nodeName] = json;
    json = tmp;
  }
  return json;
};
XML.ObjTree.prototype.parseElement = function(elem) {
  if (elem.nodeType == 7) {
    return;
  }
  if (elem.nodeType == 3 || elem.nodeType == 4) {
    var bool = elem.nodeValue.match(/[^\x00-\x20]/);
    if (bool == null)
      return;
    return elem.nodeValue;
  }
  var retval;
  var cnt = {};
  if (elem.attributes && elem.attributes.length) {
    retval = {};
    for (var i2 = 0; i2 < elem.attributes.length; i2++) {
      var key = elem.attributes[i2].nodeName;
      if (typeof key != "string")
        continue;
      var val = elem.attributes[i2].nodeValue;
      if (!val)
        continue;
      key = this.attr_prefix + key;
      if (typeof cnt[key] == "undefined")
        cnt[key] = 0;
      cnt[key]++;
      this.addNode(retval, key, cnt[key], val);
    }
  }
  if (elem.childNodes && elem.childNodes.length) {
    var textonly = true;
    if (retval)
      textonly = false;
    for (var i2 = 0; i2 < elem.childNodes.length && textonly; i2++) {
      var ntype = elem.childNodes[i2].nodeType;
      if (ntype == 3 || ntype == 4)
        continue;
      textonly = false;
    }
    if (textonly) {
      if (!retval)
        retval = "";
      for (var i2 = 0; i2 < elem.childNodes.length; i2++) {
        retval += elem.childNodes[i2].nodeValue;
      }
    } else {
      if (!retval)
        retval = {};
      for (var i2 = 0; i2 < elem.childNodes.length; i2++) {
        var key = elem.childNodes[i2].nodeName;
        if (typeof key != "string")
          continue;
        var val = this.parseElement(elem.childNodes[i2]);
        if (!val)
          continue;
        if (typeof cnt[key] == "undefined")
          cnt[key] = 0;
        cnt[key]++;
        this.addNode(retval, key, cnt[key], val);
      }
    }
  }
  return retval;
};
XML.ObjTree.prototype.addNode = function(hash, key, cnts, val) {
  if (this.__force_array[key]) {
    if (cnts == 1)
      hash[key] = [];
    hash[key][hash[key].length] = val;
  } else if (cnts == 1) {
    hash[key] = val;
  } else if (cnts == 2) {
    hash[key] = [hash[key], val];
  } else {
    hash[key][hash[key].length] = val;
  }
};
XML.ObjTree.prototype.writeXML = function(tree) {
  var xml = this.hash_to_xml(null, tree);
  return this.xmlDecl + xml;
};
XML.ObjTree.prototype.hash_to_xml = function(name, tree) {
  var elem = [];
  var attr = [];
  for (var key in tree) {
    if (!tree.hasOwnProperty(key))
      continue;
    var val = tree[key];
    if (key.charAt(0) != this.attr_prefix) {
      if (typeof val == "undefined" || val == null) {
        elem[elem.length] = "<" + key + " />";
      } else if (typeof val == "object" && val.constructor == Array) {
        elem[elem.length] = this.array_to_xml(key, val);
      } else if (typeof val == "object") {
        elem[elem.length] = this.hash_to_xml(key, val);
      } else {
        elem[elem.length] = this.scalar_to_xml(key, val);
      }
    } else {
      attr[attr.length] = " " + key.substring(1) + '="' + this.xml_escape(val) + '"';
    }
  }
  var jattr = attr.join("");
  var jelem = elem.join("");
  if (typeof name == "undefined" || name == null) {
  } else if (elem.length > 0) {
    if (jelem.match(/\n/)) {
      jelem = "<" + name + jattr + ">\n" + jelem + "</" + name + ">\n";
    } else {
      jelem = "<" + name + jattr + ">" + jelem + "</" + name + ">\n";
    }
  } else {
    jelem = "<" + name + jattr + " />\n";
  }
  return jelem;
};
XML.ObjTree.prototype.array_to_xml = function(name, array) {
  var out = [];
  for (var i2 = 0; i2 < array.length; i2++) {
    var val = array[i2];
    if (typeof val == "undefined" || val == null) {
      out[out.length] = "<" + name + " />";
    } else if (typeof val == "object" && val.constructor == Array) {
      out[out.length] = this.array_to_xml(name, val);
    } else if (typeof val == "object") {
      out[out.length] = this.hash_to_xml(name, val);
    } else {
      out[out.length] = this.scalar_to_xml(name, val);
    }
  }
  return out.join("");
};
XML.ObjTree.prototype.scalar_to_xml = function(name, text) {
  if (name == "#text") {
    return this.xml_escape(text);
  } else {
    return "<" + name + ">" + this.xml_escape(text) + "</" + name + ">\n";
  }
};
XML.ObjTree.prototype.xml_escape = function(text) {
  return text.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">").replace(/"/g, '"');
};
var lfXml2Json = function(xmlData) {
  return new XML.ObjTree().parseXML(xmlData);
};

// node_modules/@logicflow/extension/es/bpmn-adapter/index.js
var __read = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var BpmnElements;
(function(BpmnElements2) {
  BpmnElements2["START"] = "bpmn:startEvent";
  BpmnElements2["END"] = "bpmn:endEvent";
  BpmnElements2["GATEWAY"] = "bpmn:exclusiveGateway";
  BpmnElements2["USER"] = "bpmn:userTask";
  BpmnElements2["SYSTEM"] = "bpmn:serviceTask";
  BpmnElements2["FLOW"] = "bpmn:sequenceFlow";
})(BpmnElements || (BpmnElements = {}));
var defaultAttrs = ["-name", "-id", "bpmn:incoming", "bpmn:outgoing", "-sourceRef", "-targetRef"];
function toXmlJson(json) {
  var xmlJson = {};
  Object.entries(json).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (typeof value !== "object") {
      if (key.indexOf("-") === 0) {
        xmlJson[key] = value;
      } else {
        xmlJson["-" + key] = value;
      }
    } else {
      xmlJson[key] = toXmlJson(value);
    }
  });
  return xmlJson;
}
function toNormalJson(xmlJson) {
  var json = {};
  Object.entries(xmlJson).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (typeof value === "string") {
      if (key.indexOf("-") === 0) {
        json[key.substr(1)] = value;
      } else {
        json[key] = value;
      }
    } else if (typeof value === "object") {
      json[key] = toNormalJson(value);
    } else {
      json[key] = value;
    }
  });
  return json;
}
function convertLf2ProcessData(bpmnProcessData, data) {
  var nodeMap = /* @__PURE__ */ new Map();
  data.nodes.forEach(function(node) {
    var _a;
    var processNode = {
      "-id": node.id
    };
    if ((_a = node.text) === null || _a === void 0 ? void 0 : _a.value) {
      processNode["-name"] = node.text.value;
    }
    if (node.properties) {
      var properties = toXmlJson(node.properties);
      Object.assign(processNode, properties);
    }
    nodeMap.set(node.id, processNode);
    if (!bpmnProcessData[node.type]) {
      bpmnProcessData[node.type] = processNode;
    } else if (Array.isArray(bpmnProcessData[node.type])) {
      bpmnProcessData[node.type].push(processNode);
    } else {
      bpmnProcessData[node.type] = [
        bpmnProcessData[node.type],
        processNode
      ];
    }
  });
  var sequenceFlow = data.edges.map(function(edge) {
    var _a, _b;
    var targetNode = nodeMap.get(edge.targetNodeId);
    if (!targetNode["bpmn:incoming"]) {
      targetNode["bpmn:incoming"] = edge.id;
    } else if (Array.isArray(targetNode["bpmn:incoming"])) {
      targetNode["bpmn:incoming"].push(edge.id);
    } else {
      targetNode["bpmn:incoming"] = [
        targetNode["bpmn:incoming"],
        edge.id
      ];
    }
    var sourceNode = nodeMap.get(edge.sourceNodeId);
    if (!sourceNode["bpmn:outgoing"]) {
      sourceNode["bpmn:outgoing"] = edge.id;
    } else if (Array.isArray(sourceNode["bpmn:outgoing"])) {
      sourceNode["bpmn:outgoing"].push(edge.id);
    } else {
      sourceNode["bpmn:outgoing"] = [
        sourceNode["bpmn:outgoing"],
        edge.id
      ];
    }
    var edgeConfig = {
      "-id": edge.id,
      "-sourceRef": edge.sourceNodeId,
      "-targetRef": edge.targetNodeId
    };
    if ((_a = edge.text) === null || _a === void 0 ? void 0 : _a.value) {
      edgeConfig["-name"] = (_b = edge.text) === null || _b === void 0 ? void 0 : _b.value;
    }
    if (edge.properties) {
      var properties = toXmlJson(edge.properties);
      Object.assign(edgeConfig, properties);
    }
    return edgeConfig;
  });
  bpmnProcessData[BpmnElements.FLOW] = sequenceFlow;
}
function convertLf2DiagramData(bpmnDiagramData, data) {
  bpmnDiagramData["bpmndi:BPMNEdge"] = data.edges.map(function(edge) {
    var _a;
    var edgeId = edge.id;
    var pointsList = edge.pointsList.map(function(_a2) {
      var x2 = _a2.x, y2 = _a2.y;
      return { "-x": x2, "-y": y2 };
    });
    var diagramData = {
      "-id": edgeId + "_di",
      "-bpmnElement": edgeId,
      "di:waypoint": pointsList
    };
    if ((_a = edge.text) === null || _a === void 0 ? void 0 : _a.value) {
      diagramData["bpmndi:BPMNLabel"] = {
        "dc:Bounds": {
          "-x": edge.text.x - edge.text.value.length * 10 / 2,
          "-y": edge.text.y - 7,
          "-width": edge.text.value.length * 10,
          "-height": 14
        }
      };
    }
    return diagramData;
  });
  bpmnDiagramData["bpmndi:BPMNShape"] = data.nodes.map(function(node) {
    var _a;
    var nodeId = node.id;
    var width = 100;
    var height = 80;
    var x2 = node.x, y2 = node.y;
    var shapeConfig = BpmnAdapter.shapeConfigMap.get(node.type);
    if (shapeConfig) {
      width = shapeConfig.width;
      height = shapeConfig.height;
    }
    x2 -= width / 2;
    y2 -= height / 2;
    var diagramData = {
      "-id": nodeId + "_di",
      "-bpmnElement": nodeId,
      "dc:Bounds": {
        "-x": x2,
        "-y": y2,
        "-width": width,
        "-height": height
      }
    };
    if ((_a = node.text) === null || _a === void 0 ? void 0 : _a.value) {
      diagramData["bpmndi:BPMNLabel"] = {
        "dc:Bounds": {
          "-x": node.text.x - node.text.value.length * 10 / 2,
          "-y": node.text.y - 7,
          "-width": node.text.value.length * 10,
          "-height": 14
        }
      };
    }
    return diagramData;
  });
}
function convertBpmn2LfData(bpmnData) {
  var nodes = [];
  var edges = [];
  var definitions = bpmnData["bpmn:definitions"];
  if (definitions) {
    var process_1 = definitions["bpmn:process"];
    Object.keys(process_1).forEach(function(key) {
      if (key.indexOf("bpmn:") === 0) {
        var value = process_1[key];
        if (key === BpmnElements.FLOW) {
          var bpmnEdges = definitions["bpmndi:BPMNDiagram"]["bpmndi:BPMNPlane"]["bpmndi:BPMNEdge"];
          edges = getLfEdges(value, bpmnEdges);
        } else {
          var shapes = definitions["bpmndi:BPMNDiagram"]["bpmndi:BPMNPlane"]["bpmndi:BPMNShape"];
          nodes = nodes.concat(getLfNodes(value, shapes, key));
        }
      }
    });
  }
  return {
    nodes,
    edges
  };
}
function getLfNodes(value, shapes, key) {
  var nodes = [];
  if (Array.isArray(value)) {
    value.forEach(function(val) {
      var shapeValue2;
      if (Array.isArray(shapes)) {
        shapeValue2 = shapes.find(function(shape) {
          return shape["-bpmnElement"] === val["-id"];
        });
      } else {
        shapeValue2 = shapes;
      }
      var node2 = getNodeConfig(shapeValue2, key, val);
      nodes.push(node2);
    });
  } else {
    var shapeValue = void 0;
    if (Array.isArray(shapes)) {
      shapeValue = shapes.find(function(shape) {
        return shape["-bpmnElement"] === value["-id"];
      });
    } else {
      shapeValue = shapes;
    }
    var node = getNodeConfig(shapeValue, key, value);
    nodes.push(node);
  }
  return nodes;
}
function getNodeConfig(shapeValue, type, processValue) {
  var x2 = Number(shapeValue["dc:Bounds"]["-x"]);
  var y2 = Number(shapeValue["dc:Bounds"]["-y"]);
  var name = processValue["-name"];
  var shapeConfig = BpmnAdapter.shapeConfigMap.get(type);
  if (shapeConfig) {
    x2 += shapeConfig.width / 2;
    y2 += shapeConfig.height / 2;
  }
  var properties;
  Object.entries(processValue).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (defaultAttrs.indexOf(key) === -1) {
      if (!properties)
        properties = {};
      properties[key] = value;
    }
  });
  if (properties) {
    properties = toNormalJson(properties);
  }
  var text;
  if (name) {
    text = {
      x: x2,
      y: y2,
      value: name
    };
    if (shapeValue["bpmndi:BPMNLabel"] && shapeValue["bpmndi:BPMNLabel"]["dc:Bounds"]) {
      var textBounds = shapeValue["bpmndi:BPMNLabel"]["dc:Bounds"];
      text.x = Number(textBounds["-x"]) + Number(textBounds["-width"]) / 2;
      text.y = Number(textBounds["-y"]) + Number(textBounds["-height"]) / 2;
    }
  }
  var nodeConfig = {
    id: shapeValue["-bpmnElement"],
    type,
    x: x2,
    y: y2,
    properties
  };
  if (text) {
    nodeConfig.text = text;
  }
  return nodeConfig;
}
function getLfEdges(value, bpmnEdges) {
  var edges = [];
  if (Array.isArray(value)) {
    value.forEach(function(val) {
      var edgeValue2;
      if (Array.isArray(bpmnEdges)) {
        edgeValue2 = bpmnEdges.find(function(edge) {
          return edge["-bpmnElement"] === val["-id"];
        });
      } else {
        edgeValue2 = bpmnEdges;
      }
      edges.push(getEdgeConfig(edgeValue2, val));
    });
  } else {
    var edgeValue = void 0;
    if (Array.isArray(bpmnEdges)) {
      edgeValue = bpmnEdges.find(function(edge) {
        return edge["-bpmnElement"] === value["-id"];
      });
    } else {
      edgeValue = bpmnEdges;
    }
    edges.push(getEdgeConfig(edgeValue, value));
  }
  return edges;
}
function getEdgeConfig(edgeValue, processValue) {
  var text;
  var textVal = processValue["-name"];
  if (textVal) {
    var textBounds = edgeValue["bpmndi:BPMNLabel"]["dc:Bounds"];
    var textLength_1 = 0;
    textVal.split("\n").forEach(function(textSpan) {
      if (textLength_1 < textSpan.length) {
        textLength_1 = textSpan.length;
      }
    });
    text = {
      value: textVal,
      x: Number(textBounds["-x"]) + textLength_1 * 10 / 2,
      y: Number(textBounds["-y"]) + 7
    };
  }
  var properties;
  Object.entries(processValue).forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], value = _b[1];
    if (defaultAttrs.indexOf(key) === -1) {
      if (!properties)
        properties = {};
      properties[key] = value;
    }
  });
  if (properties) {
    properties = toNormalJson(properties);
  }
  var edge = {
    id: processValue["-id"],
    type: BpmnElements.FLOW,
    pointsList: edgeValue["di:waypoint"].map(function(point) {
      return {
        x: Number(point["-x"]),
        y: Number(point["-y"])
      };
    }),
    sourceNodeId: processValue["-sourceRef"],
    targetNodeId: processValue["-targetRef"],
    properties
  };
  if (text) {
    edge.text = text;
  }
  return edge;
}
var BpmnAdapter = {
  pluginName: "bpmn-adapter",
  install: function(lf) {
    lf.adapterIn = this.adapterIn;
    lf.adapterOut = this.adapterOut;
  },
  shapeConfigMap: /* @__PURE__ */ new Map(),
  setCustomShape: function(key, val) {
    this.shapeConfigMap.set(key, val);
  },
  adapterOut: function(data) {
    var bpmnProcessData = {
      "-id": "Process_" + getBpmnId2(),
      "-isExecutable": "false"
    };
    convertLf2ProcessData(bpmnProcessData, data);
    var bpmnDiagramData = {
      "-id": "BPMNPlane_1",
      "-bpmnElement": bpmnProcessData["-id"]
    };
    convertLf2DiagramData(bpmnDiagramData, data);
    var bpmnData = {
      "bpmn:definitions": {
        "-id": "Definitions_" + getBpmnId2(),
        "-xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "-xmlns:bpmn": "http://www.omg.org/spec/BPMN/20100524/MODEL",
        "-xmlns:bpmndi": "http://www.omg.org/spec/BPMN/20100524/DI",
        "-xmlns:dc": "http://www.omg.org/spec/DD/20100524/DC",
        "-xmlns:di": "http://www.omg.org/spec/DD/20100524/DI",
        "-targetNamespace": "http://bpmn.io/schema/bpmn",
        "-exporter": "bpmn-js (https://demo.bpmn.io)",
        "-exporterVersion": "7.3.0",
        "bpmn:process": bpmnProcessData,
        "bpmndi:BPMNDiagram": {
          "-id": "BPMNDiagram_1",
          "bpmndi:BPMNPlane": bpmnDiagramData
        }
      }
    };
    return bpmnData;
  },
  adapterIn: function(bpmnData) {
    if (bpmnData) {
      return convertBpmn2LfData(bpmnData);
    }
  }
};
BpmnAdapter.shapeConfigMap.set(BpmnElements.START, {
  width: StartEventConfig.width,
  height: StartEventConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.END, {
  width: EndEventConfig.width,
  height: EndEventConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.GATEWAY, {
  width: ExclusiveGatewayConfig.width,
  height: ExclusiveGatewayConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.SYSTEM, {
  width: ServiceTaskConfig.width,
  height: ServiceTaskConfig.height
});
BpmnAdapter.shapeConfigMap.set(BpmnElements.USER, {
  width: UserTaskConfig.width,
  height: UserTaskConfig.height
});
var BpmnXmlAdapter = {
  pluginName: "bpmnXmlAdapter",
  install: function(lf) {
    lf.adapterIn = this.adapterXmlIn;
    lf.adapterOut = this.adapterXmlOut;
  },
  adapterXmlIn: function(bpmnData) {
    var json = lfXml2Json(bpmnData);
    return BpmnAdapter.adapterIn(json);
  },
  adapterXmlOut: function(data) {
    var outData = BpmnAdapter.adapterOut(data);
    return lfJson2Xml(outData);
  }
};

// node_modules/@logicflow/extension/es/turbo-adapter/index.js
init_define_APP_INFO();
var __assign5 = function() {
  __assign5 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign5.apply(this, arguments);
};
var TurboType;
(function(TurboType2) {
  TurboType2[TurboType2["SEQUENCE_FLOW"] = 1] = "SEQUENCE_FLOW";
  TurboType2[TurboType2["START_EVENT"] = 2] = "START_EVENT";
  TurboType2[TurboType2["END_EVENT"] = 3] = "END_EVENT";
  TurboType2[TurboType2["USER_TASK"] = 4] = "USER_TASK";
  TurboType2[TurboType2["EXCLUSIVE_GATEWAY"] = 6] = "EXCLUSIVE_GATEWAY";
})(TurboType || (TurboType = {}));
function getTurboType(type) {
  switch (type) {
    case "bpmn:sequenceFlow":
      return TurboType.SEQUENCE_FLOW;
    case "bpmn:startEvent":
      return TurboType.START_EVENT;
    case "bpmn:endEvent":
      return TurboType.END_EVENT;
    case "bpmn:userTask":
      return TurboType.USER_TASK;
    case "bpmn:exclusiveGateway":
      return TurboType.EXCLUSIVE_GATEWAY;
    default:
      return type;
  }
}
function convertNodeToTurboElement(node) {
  var id = node.id, type = node.type, x2 = node.x, y2 = node.y, _a = node.text, text = _a === void 0 ? "" : _a, properties = node.properties;
  return {
    incoming: [],
    outgoing: [],
    dockers: [],
    type: getTurboType(node.type),
    properties: __assign5(__assign5({}, properties), {
      name: text && text.value || "",
      x: x2,
      y: y2,
      text,
      logicFlowType: type
    }),
    key: id
  };
}
function convertEdgeToTurboElement(edge) {
  var id = edge.id, type = edge.type, sourceNodeId = edge.sourceNodeId, targetNodeId = edge.targetNodeId, startPoint = edge.startPoint, endPoint = edge.endPoint, pointsList = edge.pointsList, _a = edge.text, text = _a === void 0 ? "" : _a, properties = edge.properties;
  return {
    incoming: [sourceNodeId],
    outgoing: [targetNodeId],
    type: getTurboType(type),
    dockers: [],
    properties: __assign5(__assign5({}, properties), {
      name: text && text.value || "",
      text,
      startPoint,
      endPoint,
      pointsList,
      logicFlowType: type
    }),
    key: id
  };
}
function toTurboData(data) {
  var nodeMap = /* @__PURE__ */ new Map();
  var turboData = {
    flowElementList: []
  };
  data.nodes.forEach(function(node) {
    var flowElement = convertNodeToTurboElement(node);
    turboData.flowElementList.push(flowElement);
    nodeMap.set(node.id, flowElement);
  });
  data.edges.forEach(function(edge) {
    var flowElement = convertEdgeToTurboElement(edge);
    var sourceElement = nodeMap.get(edge.sourceNodeId);
    sourceElement.outgoing.push(flowElement.key);
    var targetElement = nodeMap.get(edge.targetNodeId);
    targetElement.incoming.push(flowElement.key);
    turboData.flowElementList.push(flowElement);
  });
  return turboData;
}
function convertFlowElementToEdge(element) {
  var incoming = element.incoming, outgoing = element.outgoing, properties = element.properties, key = element.key;
  var text = properties.text, startPoint = properties.startPoint, endPoint = properties.endPoint, pointsList = properties.pointsList, logicFlowType = properties.logicFlowType;
  var edge = {
    id: key,
    type: logicFlowType,
    sourceNodeId: incoming[0],
    targetNodeId: outgoing[0],
    text,
    startPoint,
    endPoint,
    pointsList,
    properties: {}
  };
  var excludeProperties = ["startPoint", "endPoint", "pointsList", "text", "logicFlowType"];
  Object.keys(element.properties).forEach(function(property) {
    if (excludeProperties.indexOf(property) === -1) {
      edge.properties[property] = element.properties[property];
    }
  });
  return edge;
}
function convertFlowElementToNode(element) {
  var properties = element.properties, key = element.key;
  var x2 = properties.x, y2 = properties.y, text = properties.text, logicFlowType = properties.logicFlowType;
  var node = {
    id: key,
    type: logicFlowType,
    x: x2,
    y: y2,
    text,
    properties: {}
  };
  var excludeProperties = ["x", "y", "text", "logicFlowType"];
  Object.keys(element.properties).forEach(function(property) {
    if (excludeProperties.indexOf(property) === -1) {
      node.properties[property] = element.properties[property];
    }
  });
  return node;
}
function toLogicflowData(data) {
  var lfData = {
    nodes: [],
    edges: []
  };
  var list = data.flowElementList;
  list && list.length > 0 && list.forEach(function(element) {
    if (element.type === TurboType.SEQUENCE_FLOW) {
      var edge = convertFlowElementToEdge(element);
      lfData.edges.push(edge);
    } else {
      var node = convertFlowElementToNode(element);
      lfData.nodes.push(node);
    }
  });
  return lfData;
}
var TurboAdapter = {
  pluginName: "turboAdapter",
  install: function(lf) {
    lf.adapterIn = this.adapterIn;
    lf.adapterOut = this.adapterOut;
  },
  shapeConfigMap: /* @__PURE__ */ new Map(),
  setCustomShape: function(key, val) {
    this.shapeConfigMap.set(key, val);
  },
  adapterOut: function(logicflowData) {
    if (logicflowData) {
      return toTurboData(logicflowData);
    }
  },
  adapterIn: function(turboData) {
    if (turboData) {
      return toLogicflowData(turboData);
    }
  }
};

// node_modules/@logicflow/extension/es/insert-node-in-polyline/index.js
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/insert-node-in-polyline/edge.js
init_define_APP_INFO();
var SegmentDirection;
(function(SegmentDirection2) {
  SegmentDirection2["HORIZONTAL"] = "horizontal";
  SegmentDirection2["VERTICAL"] = "vertical";
})(SegmentDirection || (SegmentDirection = {}));
var isInSegment = function(point, start, end) {
  var x2 = point.x, y2 = point.y;
  return (x2 - start.x) * (x2 - end.x) <= 0 && (y2 - start.y) * (y2 - end.y) <= 0;
};
var getNodeBBox = function(node) {
  var x2 = node.x, y2 = node.y, width = node.width, height = node.height;
  var bBox = {
    minX: x2 - width / 2,
    minY: y2 - height / 2,
    maxX: x2 + width / 2,
    maxY: y2 + height / 2,
    x: x2,
    y: y2,
    width,
    height,
    centerX: x2,
    centerY: y2
  };
  return bBox;
};
var segmentDirection = function(start, end) {
  var direction;
  if (start.x === end.x) {
    direction = SegmentDirection.VERTICAL;
  } else if (start.y === end.y) {
    direction = SegmentDirection.HORIZONTAL;
  }
  return direction;
};
var corssPointInSegement = function(node, start, end) {
  var bBox = getNodeBBox(node);
  var direction = segmentDirection(start, end);
  var maxX = Math.max(start.x, end.x);
  var minX = Math.min(start.x, end.x);
  var maxY = Math.max(start.y, end.y);
  var minY = Math.min(start.y, end.y);
  var x2 = node.x, y2 = node.y, width = node.width, height = node.height;
  if (direction === SegmentDirection.HORIZONTAL) {
    if (start.y === y2 && maxX >= bBox.maxX && minX <= bBox.minX) {
      return {
        startCrossPoint: {
          x: start.x > end.x ? x2 + width / 2 : x2 - width / 2,
          y: y2
        },
        endCrossPoint: {
          x: start.x > end.x ? x2 - width / 2 : x2 + width / 2,
          y: y2
        }
      };
    }
  } else if (direction === SegmentDirection.VERTICAL) {
    if (start.x === node.x && maxY >= bBox.maxY && minY <= bBox.minY) {
      return {
        startCrossPoint: {
          x: x2,
          y: start.y > end.y ? y2 + height / 2 : y2 - height / 2
        },
        endCrossPoint: {
          x: x2,
          y: start.y > end.y ? y2 - height / 2 : y2 + height / 2
        }
      };
    }
  }
};
var isNodeInSegement = function(node, polyline) {
  var x2 = node.x, y2 = node.y;
  var pointsList = polyline.pointsList;
  for (var i2 = 0; i2 < pointsList.length - 1; i2++) {
    if (isInSegment({ x: x2, y: y2 }, pointsList[i2], pointsList[i2 + 1])) {
      var bBoxCross = corssPointInSegement(node, pointsList[i2], pointsList[i2 + 1]);
      if (bBoxCross) {
        return {
          crossIndex: i2 + 1,
          crossPoints: bBoxCross
        };
      }
    }
  }
  return {
    crossIndex: -1,
    crossPoints: {
      startCrossPoint: { x: 0, y: 0 },
      endCrossPoint: { x: 0, y: 0 }
    }
  };
};

// node_modules/@logicflow/extension/es/insert-node-in-polyline/index.js
var __read2 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spread = function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read2(arguments[i2]));
  return ar;
};
var InsertNodeInPolyline = function() {
  function InsertNodeInPolyline2(_a) {
    var lf = _a.lf;
    this._lf = lf;
    this.dndAdd = true;
    this.dropAdd = true;
    this.eventHandler();
  }
  InsertNodeInPolyline2.prototype.eventHandler = function() {
    var _this = this;
    if (this.dndAdd) {
      this._lf.on("node:dnd-add", function(_a) {
        var data = _a.data;
        _this.insetNode(data);
      });
    }
    if (this.dropAdd) {
      this._lf.on("node:drop", function(_a) {
        var data = _a.data;
        var edges = _this._lf.graphModel.edges;
        var id = data.id;
        var pureNode = true;
        for (var i2 = 0; i2 < edges.length; i2++) {
          if (edges[i2].sourceNodeId === id || edges[i2].targetNodeId === id) {
            pureNode = false;
            break;
          }
        }
        if (pureNode) {
          _this.insetNode(data);
        }
      });
    }
  };
  InsertNodeInPolyline2.prototype.insetNode = function(nodeData) {
    var edges = this._lf.graphModel.edges;
    var nodeModel = this._lf.getNodeModelById(nodeData.id);
    for (var i2 = 0; i2 < edges.length; i2++) {
      var _a = isNodeInSegement(nodeModel, edges[i2]), crossIndex = _a.crossIndex, crossPoints = _a.crossPoints;
      if (crossIndex >= 0) {
        var _b = edges[i2], sourceNodeId = _b.sourceNodeId, targetNodeId = _b.targetNodeId, id = _b.id, type = _b.type, pointsList = _b.pointsList;
        this._lf.addEdge({
          type,
          sourceNodeId,
          targetNodeId: nodeData.id,
          pointsList: __spread(pointsList.slice(0, crossIndex), [crossPoints.startCrossPoint])
        });
        this._lf.addEdge({
          type,
          sourceNodeId: nodeData.id,
          targetNodeId,
          pointsList: __spread([crossPoints.endCrossPoint], pointsList.slice(crossIndex))
        });
        this._lf.deleteEdge(id);
        break;
      }
    }
  };
  InsertNodeInPolyline2.pluginName = "insertNodeInPolyline";
  return InsertNodeInPolyline2;
}();

// node_modules/@logicflow/extension/es/components/control/index.js
init_define_APP_INFO();
var __read3 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spread2 = function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read3(arguments[i2]));
  return ar;
};
var Control = function() {
  function Control3(_a) {
    var _this = this;
    var lf = _a.lf;
    this.controlItems = [
      {
        key: "zoom-out",
        iconClass: "lf-control-zoomOut",
        title: "\u7F29\u5C0F\u6D41\u7A0B\u56FE",
        text: "\u7F29\u5C0F",
        onClick: function() {
          _this.lf.zoom(false);
        }
      },
      {
        key: "zoom-in",
        iconClass: "lf-control-zoomIn",
        title: "\u653E\u5927\u6D41\u7A0B\u56FE",
        text: "\u653E\u5927",
        onClick: function() {
          _this.lf.zoom(true);
        }
      },
      {
        key: "reset",
        iconClass: "lf-control-fit",
        title: "\u6062\u590D\u6D41\u7A0B\u539F\u6709\u5C3A\u5BF8",
        text: "\u9002\u5E94",
        onClick: function() {
          _this.lf.resetZoom();
        }
      },
      {
        key: "undo",
        iconClass: "lf-control-undo",
        title: "\u56DE\u5230\u4E0A\u4E00\u6B65",
        text: "\u4E0A\u4E00\u6B65",
        onClick: function() {
          _this.lf.undo();
        }
      },
      {
        key: "redo",
        iconClass: "lf-control-redo",
        title: "\u79FB\u5230\u4E0B\u4E00\u6B65",
        text: "\u4E0B\u4E00\u6B65",
        onClick: function() {
          _this.lf.redo();
        }
      }
    ];
    this.lf = lf;
  }
  Control3.prototype.render = function(lf, domContainer) {
    this.destroy();
    var toolEl = this.getControlTool();
    this.toolEl = toolEl;
    domContainer.appendChild(toolEl);
    this.domContainer = domContainer;
  };
  Control3.prototype.destroy = function() {
    if (this.domContainer && this.toolEl && this.domContainer.contains(this.toolEl)) {
      this.domContainer.removeChild(this.toolEl);
    }
  };
  Control3.prototype.addItem = function(item) {
    this.controlItems.push(item);
  };
  Control3.prototype.removeItem = function(key) {
    var index = this.controlItems.findIndex(function(item) {
      return item.key === key;
    });
    return this.controlItems.splice(index, 1)[0];
  };
  Control3.prototype.getControlTool = function() {
    var _this = this;
    var NORMAL = "lf-control-item";
    var DISABLED = "lf-control-item disabled";
    var controlTool = document.createElement("div");
    var controlElements = [];
    controlTool.className = "lf-control";
    this.controlItems.forEach(function(item) {
      var itemContainer = document.createElement("div");
      var icon = document.createElement("i");
      var text = document.createElement("span");
      itemContainer.className = DISABLED;
      item.onClick && (itemContainer.onclick = item.onClick.bind(null, _this.lf));
      item.onMouseEnter && (itemContainer.onmouseenter = item.onMouseEnter.bind(null, _this.lf));
      item.onMouseLeave && (itemContainer.onmouseleave = item.onMouseLeave.bind(null, _this.lf));
      icon.className = item.iconClass;
      text.className = "lf-control-text";
      text.title = item.title;
      text.innerText = item.text;
      itemContainer.append(icon, text);
      switch (item.text) {
        case "\u4E0A\u4E00\u6B65":
          _this.lf.on("history:change", function(_a) {
            var undoAble = _a.data.undoAble;
            itemContainer.className = undoAble ? NORMAL : DISABLED;
          });
          break;
        case "\u4E0B\u4E00\u6B65":
          _this.lf.on("history:change", function(_a) {
            var redoAble = _a.data.redoAble;
            itemContainer.className = redoAble ? NORMAL : DISABLED;
          });
          break;
        default:
          itemContainer.className = NORMAL;
          break;
      }
      controlElements.push(itemContainer);
    });
    controlTool.append.apply(controlTool, __spread2(controlElements));
    return controlTool;
  };
  Control3.pluginName = "control";
  return Control3;
}();

// node_modules/@logicflow/extension/es/components/menu/index.js
init_define_APP_INFO();
var __read4 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spread3 = function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read4(arguments[i2]));
  return ar;
};
var DefalutNodeMenuKey = "lf:defaultNodeMenu";
var DefalutEdgeMenuKey = "lf:defaultEdgeMenu";
var DefalutGraphMenuKey = "lf:defaultGraphMenu";
var DefalutSelectionMenuKey = "lf:defaultSelectionMenu";
var Menu = function() {
  function Menu2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.__menuDOM = document.createElement("ul");
    this.lf = lf;
    this.menuTypeMap = /* @__PURE__ */ new Map();
    this.init();
    this.lf.setMenuConfig = function(config) {
      _this.setMenuConfig(config);
    };
    this.lf.addMenuConfig = function(config) {
      _this.addMenuConfig(config);
    };
    this.lf.setMenuByType = function(config) {
      _this.setMenuByType(config);
    };
  }
  Menu2.prototype.init = function() {
    var _this = this;
    var defalutNodeMenu = [
      {
        text: "\u5220\u9664",
        callback: function(node) {
          _this.lf.deleteNode(node.id);
        }
      },
      {
        text: "\u7F16\u8F91\u6587\u672C",
        callback: function(node) {
          _this.lf.graphModel.editText(node.id);
        }
      },
      {
        text: "\u590D\u5236",
        callback: function(node) {
          _this.lf.cloneNode(node.id);
        }
      }
    ];
    this.menuTypeMap.set(DefalutNodeMenuKey, defalutNodeMenu);
    var defaultEdgeMenu = [
      {
        text: "\u5220\u9664",
        callback: function(edge) {
          _this.lf.deleteEdge(edge.id);
        }
      },
      {
        text: "\u7F16\u8F91\u6587\u672C",
        callback: function(edge) {
          _this.lf.graphModel.editText(edge.id);
        }
      }
    ];
    this.menuTypeMap.set(DefalutEdgeMenuKey, defaultEdgeMenu);
    this.menuTypeMap.set(DefalutGraphMenuKey, []);
    var DefalutSelectionMenu = [
      {
        text: "\u5220\u9664",
        callback: function(elements) {
          _this.lf.clearSelectElements();
          elements.edges.forEach(function(edge) {
            return _this.lf.deleteEdge(edge.id);
          });
          elements.nodes.forEach(function(node) {
            return _this.lf.deleteNode(node.id);
          });
        }
      }
    ];
    this.menuTypeMap.set(DefalutSelectionMenuKey, DefalutSelectionMenu);
  };
  Menu2.prototype.render = function(lf, container) {
    var _this = this;
    this.__container = container;
    this.__currentData = null;
    this.__menuDOM.className = "lf-menu";
    container.appendChild(this.__menuDOM);
    this.__menuDOM.addEventListener("click", function(event) {
      event.stopPropagation();
      var target = event.target;
      while (Array.from(target.classList).indexOf("lf-menu-item") === -1 && Array.from(target.classList).indexOf("lf-menu") === -1) {
        target = target.parentElement;
      }
      if (Array.from(target.classList).indexOf("lf-menu-item") > -1) {
        target.onclickCallback(_this.__currentData);
        _this.__menuDOM.style.display = "none";
        _this.__currentData = null;
      } else {
        console.warn("\u70B9\u51FB\u533A\u57DF\u4E0D\u5728\u83DC\u5355\u9879\u5185\uFF0C\u8BF7\u68C0\u67E5\u4EE3\u7801\uFF01");
      }
    }, true);
    this.lf.on("node:contextmenu", function(_a) {
      var data = _a.data, position = _a.position;
      var _b = position.domOverlayPosition, x2 = _b.x, y2 = _b.y;
      var id = data.id;
      var model = _this.lf.graphModel.getNodeModelById(id);
      var menuList = [];
      var typeMenus = _this.menuTypeMap.get(model.type);
      if (model && model.menu && Array.isArray(model.menu)) {
        menuList = model.menu;
      } else if (typeMenus) {
        menuList = typeMenus;
      } else {
        menuList = _this.menuTypeMap.get(DefalutNodeMenuKey);
      }
      _this.__currentData = data;
      _this.showMenu(x2, y2, menuList);
    });
    this.lf.on("edge:contextmenu", function(_a) {
      var data = _a.data, position = _a.position;
      var _b = position.domOverlayPosition, x2 = _b.x, y2 = _b.y;
      var id = data.id;
      var model = _this.lf.graphModel.getEdgeModelById(id);
      var menuList = [];
      var typeMenus = _this.menuTypeMap.get(model.type);
      if (model && model.menu && Array.isArray(model.menu)) {
        menuList = model.menu;
      } else if (typeMenus) {
        menuList = typeMenus;
      } else {
        menuList = _this.menuTypeMap.get(DefalutEdgeMenuKey);
      }
      _this.__currentData = data;
      _this.showMenu(x2, y2, menuList);
    });
    this.lf.on("blank:contextmenu", function(_a) {
      var position = _a.position;
      var menuList = _this.menuTypeMap.get(DefalutGraphMenuKey);
      var _b = position.domOverlayPosition, x2 = _b.x, y2 = _b.y;
      _this.showMenu(x2, y2, menuList);
    });
    this.lf.on("selection:contextmenu", function(_a) {
      var data = _a.data, position = _a.position;
      var menuList = _this.menuTypeMap.get(DefalutSelectionMenuKey);
      var _b = position.domOverlayPosition, x2 = _b.x, y2 = _b.y;
      _this.__currentData = data;
      _this.showMenu(x2, y2, menuList);
    });
    this.lf.on("node:mousedown", function() {
      _this.__menuDOM.style.display = "none";
    });
    this.lf.on("edge:click", function() {
      _this.__menuDOM.style.display = "none";
    });
    this.lf.on("blank:click", function() {
      _this.__menuDOM.style.display = "none";
    });
  };
  Menu2.prototype.destroy = function() {
    var _a;
    (_a = this === null || this === void 0 ? void 0 : this.__container) === null || _a === void 0 ? void 0 : _a.removeChild(this.__menuDOM);
    this.__menuDOM = null;
  };
  Menu2.prototype.showMenu = function(x2, y2, menuList) {
    if (!menuList || !menuList.length)
      return;
    var menu = this.__menuDOM;
    menu.innerHTML = "";
    menu.append.apply(menu, __spread3(this.__getMenuDom(menuList)));
    if (!menu.children.length)
      return;
    menu.style.display = "block";
    menu.style.top = y2 + "px";
    menu.style.left = x2 + "px";
  };
  Menu2.prototype.setMenuByType = function(config) {
    if (!config.type || !config.menu) {
      return;
    }
    this.menuTypeMap.set(config.type, config.menu);
  };
  Menu2.prototype.__getMenuDom = function(list) {
    var menuList = [];
    list && list.length > 0 && list.forEach(function(item) {
      var element = document.createElement("li");
      if (item.className) {
        element.className = "lf-menu-item " + item.className;
      } else {
        element.className = "lf-menu-item";
      }
      if (item.icon === true) {
        var icon = document.createElement("span");
        icon.className = "lf-menu-item-icon";
        element.appendChild(icon);
      }
      var text = document.createElement("span");
      text.className = "lf-menu-item-text";
      if (item.text) {
        text.innerText = item.text;
      }
      element.appendChild(text);
      element.onclickCallback = item.callback;
      menuList.push(element);
    });
    return menuList;
  };
  Menu2.prototype.setMenuConfig = function(config) {
    if (!config) {
      return;
    }
    config.nodeMenu !== void 0 && this.menuTypeMap.set(DefalutNodeMenuKey, config.nodeMenu ? config.nodeMenu : []);
    config.edgeMenu !== void 0 && this.menuTypeMap.set(DefalutEdgeMenuKey, config.edgeMenu ? config.edgeMenu : []);
    config.graphMenu !== void 0 && this.menuTypeMap.set(DefalutGraphMenuKey, config.graphMenu ? config.graphMenu : []);
  };
  Menu2.prototype.addMenuConfig = function(config) {
    if (!config) {
      return;
    }
    if (Array.isArray(config.nodeMenu)) {
      var menuList = this.menuTypeMap.get(DefalutNodeMenuKey);
      this.menuTypeMap.set(DefalutNodeMenuKey, menuList.concat(config.nodeMenu));
    }
    if (Array.isArray(config.edgeMenu)) {
      var menuList = this.menuTypeMap.get(DefalutEdgeMenuKey);
      this.menuTypeMap.set(DefalutEdgeMenuKey, menuList.concat(config.edgeMenu));
    }
    if (Array.isArray(config.graphMenu)) {
      var menuList = this.menuTypeMap.get(DefalutGraphMenuKey);
      this.menuTypeMap.set(DefalutGraphMenuKey, menuList.concat(config.graphMenu));
    }
  };
  Menu2.prototype.changeMenuItem = function(type, config) {
    if (type === "add")
      this.addMenuConfig(config);
    else if (type === "reset")
      this.setMenuConfig(config);
    else {
      throw new Error("The first parameter of changeMenuConfig should be 'add' or 'reset'");
    }
  };
  Menu2.pluginName = "menu";
  return Menu2;
}();

// node_modules/@logicflow/extension/es/components/context-menu/index.js
init_define_APP_INFO();
var __read5 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var COMMON_TYPE_KEY = "menu-common";
var NEXT_X_DISTANCE = 200;
var NEXT_Y_DISTANCE = 100;
var ContextMenu = function() {
  function ContextMenu2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.menuTypeMap = /* @__PURE__ */ new Map();
    this.listenDelete = function() {
      _this.hideContextMenu();
    };
    this.lf = lf;
    this.__menuDOM = document.createElement("div");
    this.__menuDOM.className = "lf-inner-context";
    this.menuTypeMap.set(COMMON_TYPE_KEY, []);
    this.lf.setContextMenuByType = function(type, menus) {
      _this.setContextMenuByType(type, menus);
    };
    this.lf.setContextMenuItems = function(menus) {
      _this.setContextMenuItems(menus);
    };
    this.lf.showContextMenu = function(data) {
      _this.showContextMenu(data);
    };
    this.lf.hideContextMenu = function() {
      _this.hideContextMenu();
    };
  }
  ContextMenu2.prototype.render = function(lf, container) {
    var _this = this;
    this.container = container;
    lf.on("node:click", function(_a) {
      var data = _a.data;
      _this._activeData = data;
      _this.createContextMenu();
    });
    lf.on("edge:click", function(_a) {
      var data = _a.data;
      _this._activeData = data;
      _this.createContextMenu();
    });
    lf.on("blank:click", function() {
      _this.hideContextMenu();
    });
  };
  ContextMenu2.prototype.setContextMenuByType = function(type, menus) {
    this.menuTypeMap.set(type, menus);
  };
  ContextMenu2.prototype.hideContextMenu = function() {
    this.__menuDOM.innerHTML = "";
    this.__menuDOM.style.display = "none";
    if (this.isShow) {
      this.container.removeChild(this.__menuDOM);
    }
    this.lf.off("node:delete,edge:delete,node:drag,graph:transform", this.listenDelete);
    this.isShow = false;
  };
  ContextMenu2.prototype.showContextMenu = function(data) {
    if (!data || !data.id) {
      console.warn("\u8BF7\u68C0\u67E5\u4F20\u5165\u7684\u53C2\u6570");
      return;
    }
    this._activeData = data;
    this.createContextMenu();
  };
  ContextMenu2.prototype.setContextMenuItems = function(menus) {
    this.menuTypeMap.set(COMMON_TYPE_KEY, menus);
  };
  ContextMenu2.prototype.getContextMenuPosition = function() {
    var data = this._activeData;
    var Model = this.lf.graphModel.getElement(data.id);
    if (!Model) {
      console.warn("\u627E\u4E0D\u5230\u5143\u7D20" + data.id);
      return;
    }
    var x2;
    var y2;
    if (Model.BaseType === "edge") {
      x2 = Number.MIN_SAFE_INTEGER;
      y2 = Number.MAX_SAFE_INTEGER;
      var edgeData = Model.getData();
      x2 = Math.max(edgeData.startPoint.x, x2);
      y2 = Math.min(edgeData.startPoint.y, y2);
      x2 = Math.max(edgeData.endPoint.x, x2);
      y2 = Math.min(edgeData.endPoint.y, y2);
      if (edgeData.pointsList) {
        edgeData.pointsList.forEach(function(point) {
          x2 = Math.max(point.x, x2);
          y2 = Math.min(point.y, y2);
        });
      }
    }
    if (Model.BaseType === "node") {
      x2 = data.x + Model.width / 2;
      y2 = data.y - Model.height / 2;
    }
    return this.lf.graphModel.transformModel.CanvasPointToHtmlPoint([x2, y2]);
  };
  ContextMenu2.prototype.createContextMenu = function() {
    var _this = this;
    var isSilentMode = this.lf.options.isSilentMode;
    if (isSilentMode) {
      return;
    }
    var items = this.menuTypeMap.get(this._activeData.type) || [];
    items = items.concat(this.menuTypeMap.get(COMMON_TYPE_KEY));
    var menus = document.createDocumentFragment();
    items.forEach(function(item) {
      var menuItem = document.createElement("div");
      menuItem.className = "lf-context-item";
      var img = document.createElement("img");
      img.src = item.icon;
      img.className = "lf-context-img";
      if (item.className) {
        menuItem.className = menuItem.className + " " + item.className;
      }
      img.addEventListener("click", function() {
        _this.hideContextMenu();
        if (item.callback) {
          item.callback(_this._activeData);
        } else {
          _this.addNode({
            sourceId: _this._activeData.id,
            x: _this._activeData.x,
            y: _this._activeData.y,
            properties: item.properties,
            type: item.type
          });
        }
      });
      menuItem.appendChild(img);
      menus.appendChild(menuItem);
    });
    this.__menuDOM.innerHTML = "";
    this.__menuDOM.appendChild(menus);
    this.showMenu();
  };
  ContextMenu2.prototype.addNode = function(node, y2) {
    var isDeep = y2 !== void 0;
    if (y2 === void 0) {
      y2 = node.y;
    }
    var nodeModel = this.lf.getNodeModelById(node.sourceId);
    var leftTopX = node.x - nodeModel.width + NEXT_X_DISTANCE;
    var leftTopY = y2 - node.y / 2 - 20;
    var rightBottomX = node.x + nodeModel.width + NEXT_X_DISTANCE;
    var rightBottomY = y2 + node.y / 2 + 20;
    var exsitElements = this.lf.getAreaElement([leftTopX, leftTopY], [rightBottomX, rightBottomY]);
    if (exsitElements.length) {
      y2 = y2 + NEXT_Y_DISTANCE;
      this.addNode(node, y2);
      return;
    }
    var newNode = this.lf.addNode({
      type: node.type,
      x: node.x + 200,
      y: y2,
      properties: node.properties
    });
    var startPoint;
    var endPoint;
    if (isDeep) {
      startPoint = {
        x: node.x,
        y: node.y + nodeModel.height / 2
      };
      endPoint = {
        x: newNode.x - newNode.width / 2,
        y: newNode.y
      };
    }
    this.lf.addEdge({
      sourceNodeId: node.sourceId,
      targetNodeId: newNode.id,
      startPoint,
      endPoint
    });
  };
  ContextMenu2.prototype.showMenu = function() {
    var _a = __read5(this.getContextMenuPosition(), 2), x2 = _a[0], y2 = _a[1];
    this.__menuDOM.style.display = "flex";
    this.__menuDOM.style.top = y2 + "px";
    this.__menuDOM.style.left = x2 + 10 + "px";
    this.container.appendChild(this.__menuDOM);
    !this.isShow && this.lf.on("node:delete,edge:delete,node:drag,graph:transform", this.listenDelete);
    this.isShow = true;
  };
  ContextMenu2.pluginName = "contextMenu";
  return ContextMenu2;
}();

// node_modules/@logicflow/extension/es/components/dnd-panel/index.js
init_define_APP_INFO();
var DndPanel = function() {
  function DndPanel2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.lf = lf;
    this.lf.setPatternItems = function(shapeList) {
      _this.setPatternItems(shapeList);
    };
  }
  DndPanel2.prototype.render = function(lf, domContainer) {
    var _this = this;
    this.destroy();
    if (!this.shapeList || this.shapeList.length === 0) {
      this.domContainer = domContainer;
      return;
    }
    this.panelEl = document.createElement("div");
    this.panelEl.className = "lf-dndpanel";
    this.shapeList.forEach(function(shapeItem) {
      _this.panelEl.appendChild(_this.createDndItem(shapeItem));
    });
    domContainer.appendChild(this.panelEl);
    this.domContainer = domContainer;
  };
  DndPanel2.prototype.destroy = function() {
    if (this.domContainer && this.panelEl && this.domContainer.contains(this.panelEl)) {
      this.domContainer.removeChild(this.panelEl);
    }
  };
  DndPanel2.prototype.setPatternItems = function(shapeList) {
    this.shapeList = shapeList;
    if (this.domContainer) {
      this.render(this.lf, this.domContainer);
    }
  };
  DndPanel2.prototype.createDndItem = function(shapeItem) {
    var _this = this;
    var el = document.createElement("div");
    el.className = shapeItem.className ? "lf-dnd-item " + shapeItem.className : "lf-dnd-item";
    var shape = document.createElement("div");
    shape.className = "lf-dnd-shape";
    if (shapeItem.icon) {
      shape.style.backgroundImage = "url(" + shapeItem.icon + ")";
    }
    el.appendChild(shape);
    if (shapeItem.label) {
      var text = document.createElement("div");
      text.innerText = shapeItem.label;
      text.className = "lf-dnd-text";
      el.appendChild(text);
    }
    el.onmousedown = function() {
      if (shapeItem.type) {
        _this.lf.dnd.startDrag({
          type: shapeItem.type,
          properties: shapeItem.properties,
          text: shapeItem.text
        });
      }
      if (shapeItem.callback) {
        shapeItem.callback(_this.lf, _this.domContainer);
      }
    };
    return el;
  };
  DndPanel2.pluginName = "dndPanel";
  return DndPanel2;
}();

// node_modules/@logicflow/extension/es/components/selection-select/index.js
init_define_APP_INFO();
var SelectionSelect = function() {
  function SelectionSelect2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.__disabled = false;
    this.isDefalutStopMoveGraph = false;
    this.isWholeNode = true;
    this.isWholeEdge = true;
    this.__draw = function(ev) {
      var _a2 = _this.lf.getPointByClient(ev.clientX, ev.clientY).domOverlayPosition, x1 = _a2.x, y1 = _a2.y;
      _this.endPoint = { x: x1, y: y1 };
      var _b = _this.startPoint, x2 = _b.x, y2 = _b.y;
      var style = _this.wrapper.style;
      var left = x2;
      var top = y2;
      var width = x1 - x2;
      var height = y1 - y2;
      if (x1 < x2) {
        left = x1;
        width = x2 - x1;
      }
      if (y1 < y2) {
        top = y1;
        height = y2 - y1;
      }
      style.left = left + "px";
      style.top = top + "px";
      style.width = width + "px";
      style.height = height + "px";
    };
    this.__drawOff = function() {
      document.removeEventListener("mousemove", _this.__draw);
      document.removeEventListener("mouseup", _this.__drawOff);
      _this.__domContainer.removeChild(_this.wrapper);
      var _a2 = _this.startPoint, x2 = _a2.x, y2 = _a2.y;
      var _b = _this.endPoint, x1 = _b.x, y1 = _b.y;
      if (Math.abs(x1 - x2) < 10 && Math.abs(y1 - y2) < 10) {
        return;
      }
      var lt = [Math.min(x2, x1), Math.min(y2, y1)];
      var rt = [Math.max(x2, x1), Math.max(y2, y1)];
      var elements = _this.lf.getAreaElement(lt, rt, _this.isWholeEdge, _this.isWholeNode);
      elements.forEach(function(element) {
        _this.lf.selectElementById(element.id, true);
      });
      _this.lf.emit("selection:selected", elements);
    };
    this.lf = lf;
    var stopMoveGraph = lf.getEditConfig().stopMoveGraph;
    this.isDefalutStopMoveGraph = stopMoveGraph;
    lf.openSelectionSelect = function() {
      _this.openSelectionSelect();
    };
    lf.closeSelectionSelect = function() {
      _this.closeSelectionSelect();
    };
  }
  SelectionSelect2.prototype.render = function(lf, domContainer) {
    var _this = this;
    this.__domContainer = domContainer;
    lf.on("blank:mousedown", function(_a) {
      var e2 = _a.e;
      var config = lf.getEditConfig();
      if (!config.stopMoveGraph || _this.__disabled) {
        return;
      }
      var _b = lf.getPointByClient(e2.clientX, e2.clientY).domOverlayPosition, x2 = _b.x, y2 = _b.y;
      _this.startPoint = { x: x2, y: y2 };
      _this.endPoint = { x: x2, y: y2 };
      var wrapper = document.createElement("div");
      wrapper.className = "lf-selection-select";
      wrapper.style.top = _this.startPoint.y + "px";
      wrapper.style.left = _this.startPoint.x + "px";
      domContainer.appendChild(wrapper);
      _this.wrapper = wrapper;
      document.addEventListener("mousemove", _this.__draw);
      document.addEventListener("mouseup", _this.__drawOff);
    });
  };
  SelectionSelect2.prototype.setSelectionSense = function(isWholeEdge, isWholeNode) {
    if (isWholeEdge === void 0) {
      isWholeEdge = true;
    }
    if (isWholeNode === void 0) {
      isWholeNode = true;
    }
    this.isWholeEdge = isWholeEdge;
    this.isWholeNode = isWholeNode;
  };
  SelectionSelect2.prototype.openSelectionSelect = function() {
    var stopMoveGraph = this.lf.getEditConfig().stopMoveGraph;
    if (!stopMoveGraph) {
      this.isDefalutStopMoveGraph = false;
      this.lf.updateEditConfig({
        stopMoveGraph: true
      });
    }
    this.open();
  };
  SelectionSelect2.prototype.closeSelectionSelect = function() {
    if (!this.isDefalutStopMoveGraph) {
      this.lf.updateEditConfig({
        stopMoveGraph: false
      });
    }
    this.close();
  };
  SelectionSelect2.prototype.open = function() {
    this.__disabled = false;
  };
  SelectionSelect2.prototype.close = function() {
    this.__disabled = true;
  };
  SelectionSelect2.pluginName = "selectionSelect";
  return SelectionSelect2;
}();

// node_modules/@logicflow/extension/es/components/mini-map/index.js
init_define_APP_INFO();
var __values = function(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MiniMap = function() {
  function MiniMap2(_a) {
    var _this = this;
    var lf = _a.lf, LogicFlow = _a.LogicFlow;
    this.__lf = null;
    this.__container = null;
    this.__miniMapWrap = null;
    this.__miniMapContainer = null;
    this.__lfMap = null;
    this.__viewport = null;
    this.__width = 150;
    this.__height = 220;
    this.__miniMapWidth = 450;
    this.__miniMapHeight = 660;
    this.__viewPortTop = 0;
    this.__viewPortLeft = 0;
    this.__startPosition = null;
    this.__viewPortScale = 1;
    this.__viewPortWidth = 150;
    this.__viewPortHeight = 75;
    this.__resetDataX = 0;
    this.__resetDataY = 0;
    this.__LogicFlow = null;
    this.__isShow = false;
    this.__disabledPlugins = ["miniMap", "control", "selectionSelect"];
    this.show = function(leftPosition, topPosition) {
      _this.__setView();
      if (!_this.__isShow) {
        _this.__createMiniMap(leftPosition, topPosition);
      }
      _this.__isShow = true;
    };
    this.hide = function() {
      if (_this.__isShow) {
        _this.__removeMiniMap();
      }
      _this.__isShow = false;
    };
    this.__startDrag = function(e2) {
      document.addEventListener("mousemove", _this.__drag);
      document.addEventListener("mouseup", _this.__drop);
      _this.__startPosition = {
        x: e2.x,
        y: e2.y
      };
    };
    this.__drag = function(e2) {
      var viewStyle = _this.__viewport.style;
      _this.__viewPortTop += e2.y - _this.__startPosition.y;
      _this.__viewPortLeft += e2.x - _this.__startPosition.x;
      viewStyle.top = _this.__viewPortTop + "px";
      viewStyle.left = _this.__viewPortLeft + "px";
      _this.__startPosition = {
        x: e2.x,
        y: e2.y
      };
      var centerX = (_this.__viewPortLeft + _this.__viewPortWidth / 2) / _this.__viewPortScale;
      var centerY = (_this.__viewPortTop + _this.__viewPortHeight / 2) / _this.__viewPortScale;
      _this.__lf.focusOn({
        coordinate: {
          x: centerX + _this.__resetDataX,
          y: centerY + _this.__resetDataY
        }
      });
    };
    this.__drop = function() {
      document.removeEventListener("mousemove", _this.__drag);
      document.removeEventListener("mouseup", _this.__drop);
    };
    this.__lf = lf;
    this.__miniMapWidth = lf.graphModel.width;
    this.__miniMapHeight = lf.graphModel.width * 220 / 150;
    this.__LogicFlow = LogicFlow;
    this.__init();
  }
  MiniMap2.prototype.render = function(lf, container) {
    var _this = this;
    this.__container = container;
    this.__lf.on("history:change", function() {
      if (_this.__isShow) {
        _this.__setView();
      }
    });
  };
  MiniMap2.prototype.init = function(option) {
    this.__disabledPlugins = this.__disabledPlugins.concat(option.disabledPlugins || []);
  };
  MiniMap2.prototype.__init = function() {
    var miniMapWrap = document.createElement("div");
    miniMapWrap.className = "lf-mini-map-graph";
    miniMapWrap.style.width = this.__width + "px";
    miniMapWrap.style.height = this.__height + "px";
    this.__lfMap = new this.__LogicFlow({
      width: this.__lf.graphModel.width,
      height: this.__lf.graphModel.width * 220 / 150,
      container: miniMapWrap,
      isSilentMode: true,
      stopZoomGraph: true,
      stopScrollGraph: true,
      stopMoveGraph: true,
      hideAnchors: true,
      hoverOutline: false,
      disabledPlugins: this.__disabledPlugins
    });
    this.__lfMap.adapterIn = function(a2) {
      return a2;
    };
    this.__lfMap.adapterOut = function(a2) {
      return a2;
    };
    this.__miniMapWrap = miniMapWrap;
    this.__createViewPort();
  };
  MiniMap2.prototype.__createMiniMap = function(left, top) {
    var miniMapContainer = document.createElement("div");
    var miniMapWrap = this.__miniMapWrap;
    miniMapContainer.appendChild(miniMapWrap);
    if (typeof left !== "undefined" && typeof top !== "undefined") {
      miniMapContainer.style.left = left + "px";
      miniMapContainer.style.top = top + "px";
    }
    miniMapContainer.style.position = "absolute";
    miniMapContainer.className = "lf-mini-map";
    this.__container.appendChild(miniMapContainer);
    this.__miniMapWrap.appendChild(this.__viewport);
    var header = document.createElement("div");
    header.className = "lf-mini-map-header";
    header.innerText = "\u5BFC\u822A";
    miniMapContainer.appendChild(header);
    var close = document.createElement("span");
    close.className = "lf-mini-map-close";
    close.addEventListener("click", this.hide);
    miniMapContainer.appendChild(close);
    this.__miniMapContainer = miniMapContainer;
  };
  MiniMap2.prototype.__removeMiniMap = function() {
    this.__container.removeChild(this.__miniMapContainer);
  };
  MiniMap2.prototype.__getBounds = function(data) {
    var left = 0;
    var right = this.__miniMapWidth;
    var top = 0;
    var bottom = this.__miniMapHeight;
    var nodes = data.nodes;
    if (nodes && nodes.length > 0) {
      nodes.forEach(function(_a) {
        var x2 = _a.x, y2 = _a.y, _b = _a.width, width = _b === void 0 ? 200 : _b, _c = _a.height, height = _c === void 0 ? 200 : _c;
        var nodeLeft = x2 - width / 2;
        var noderight = x2 + width / 2;
        var nodeTop = y2 - height / 2;
        var nodeBottom = y2 + height / 2;
        left = nodeLeft < left ? nodeLeft : left;
        right = noderight > right ? noderight : right;
        top = nodeTop < top ? nodeTop : top;
        bottom = nodeBottom > bottom ? nodeBottom : bottom;
      });
    }
    return {
      left,
      top,
      bottom,
      right
    };
  };
  MiniMap2.prototype.__resetData = function(data) {
    var nodes = data.nodes, edges = data.edges;
    var left = 0;
    var top = 0;
    if (nodes && nodes.length > 0) {
      nodes.forEach(function(_a) {
        var x2 = _a.x, y2 = _a.y, _b = _a.width, width = _b === void 0 ? 200 : _b, _c = _a.height, height = _c === void 0 ? 200 : _c;
        var nodeLeft = x2 - width / 2;
        var nodeTop = y2 - height / 2;
        left = nodeLeft < left ? nodeLeft : left;
        top = nodeTop < top ? nodeTop : top;
      });
      if (left < 0 || top < 0) {
        this.__resetDataX = left;
        this.__resetDataY = top;
        nodes.forEach(function(node) {
          node.x = node.x - left;
          node.y = node.y - top;
          if (node.text) {
            node.text.x = node.text.x - left;
            node.text.y = node.text.y - top;
          }
        });
        edges.forEach(function(edge) {
          if (edge.startPoint) {
            edge.startPoint.x = edge.startPoint.x - left;
            edge.startPoint.y = edge.startPoint.y - top;
          }
          if (edge.endPoint) {
            edge.endPoint.x = edge.endPoint.x - left;
            edge.endPoint.y = edge.endPoint.y - top;
          }
          if (edge.text) {
            edge.text.x = edge.text.x - left;
            edge.text.y = edge.text.y - top;
          }
          if (edge.pointsList) {
            edge.pointsList.forEach(function(point) {
              point.x = point.x - left;
              point.y = point.y - top;
            });
          }
        });
      }
    }
    return data;
  };
  MiniMap2.prototype.__setView = function() {
    var e_1, _a;
    var data = this.__resetData(this.__lf.getGraphRawData());
    var viewMap = this.__lf.viewMap;
    var modelMap = this.__lf.graphModel.modelMap;
    var minimapViewMap = this.__lfMap.viewMap;
    try {
      for (var _b = __values(viewMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        if (!minimapViewMap.has(key)) {
          this.__lfMap.setView(key, viewMap.get(key));
          this.__lfMap.graphModel.modelMap.set(key, modelMap.get(key));
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    this.__lfMap.render(data);
    var _d = this.__getBounds(data), left = _d.left, top = _d.top, right = _d.right, bottom = _d.bottom;
    var realWidthScale = this.__width / (right - left);
    var realHeightScale = this.__height / (bottom - top);
    var innerStyle = this.__miniMapWrap.firstChild.style;
    var scale = Math.min(realWidthScale, realHeightScale);
    innerStyle.transform = "matrix(" + scale + ", 0, 0, " + scale + ", 0, 0)";
    innerStyle.transformOrigin = "left top";
    innerStyle.height = bottom - Math.min(top, 0) + "px";
    innerStyle.width = right - Math.min(left, 0) + "px";
    this.__viewPortScale = scale;
    this.__setViewPort(scale, {
      left,
      top,
      right,
      bottom
    });
  };
  MiniMap2.prototype.__setViewPort = function(scale, _a) {
    var left = _a.left, right = _a.right, top = _a.top, bottom = _a.bottom;
    var viewStyle = this.__viewport.style;
    viewStyle.width = this.__width - 4 + "px";
    viewStyle.height = (this.__width - 4) / (this.__lf.graphModel.width / this.__lf.graphModel.height) + "px";
    var _b = this.__lf.getTransform(), TRANSLATE_X = _b.TRANSLATE_X, TRANSLATE_Y = _b.TRANSLATE_Y;
    var realWidth = right - left;
    var realViewPortWidth = (this.__width - 4) / (realWidth / this.__lf.graphModel.width);
    var graphRatio = this.__lf.graphModel.width / this.__lf.graphModel.height;
    var realViewPortHeight = realViewPortWidth / graphRatio;
    this.__viewPortTop = TRANSLATE_Y > 0 ? 0 : -TRANSLATE_Y * scale;
    this.__viewPortLeft = -TRANSLATE_X * scale;
    this.__viewPortWidth = realViewPortWidth;
    this.__viewPortHeight = realViewPortHeight;
    viewStyle.top = this.__viewPortTop + "px";
    viewStyle.left = this.__viewPortLeft + "px";
    viewStyle.width = realViewPortWidth + "px";
    viewStyle.height = realViewPortHeight + "px";
  };
  MiniMap2.prototype.__createViewPort = function() {
    var div = document.createElement("div");
    div.className = "lf-minimap-viewport";
    div.addEventListener("mousedown", this.__startDrag);
    this.__viewport = div;
  };
  MiniMap2.pluginName = "miniMap";
  return MiniMap2;
}();

// node_modules/@logicflow/extension/es/materials/curved-edge/index.js
init_define_APP_INFO();
var import_core7 = __toESM(require_logic_flow());
var __extends7 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __read6 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var CurvedEdgeView = function(_super) {
  __extends7(CurvedEdgeView2, _super);
  function CurvedEdgeView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CurvedEdgeView2.prototype.getEdge = function() {
    var _a = this.props.model.getEdgeStyle(), strokeWidth = _a.strokeWidth, stroke = _a.stroke, strokeDashArray = _a.strokeDashArray;
    var points = this.props.model.points;
    var points2 = points.split(" ").map(function(p) {
      return p.split(",").map(function(a2) {
        return Number(a2);
      });
    });
    var _b = __read6(points2[0], 2), startX = _b[0], startY = _b[1];
    var d2 = "M" + startX + " " + startY;
    var space = 5;
    for (var i2 = 1; i2 < points2.length - 1; i2++) {
      var _c = __read6(points2[i2 - 1], 2), preX = _c[0], preY = _c[1];
      var _d = __read6(points2[i2], 2), currentX = _d[0], currentY = _d[1];
      var _e = __read6(points2[i2 + 1], 2), nextX = _e[0], nextY = _e[1];
      if (currentX === preX && currentY !== preY) {
        var y2 = currentY > preY ? currentY - space : currentY + space;
        d2 = d2 + " L " + currentX + " " + y2;
      }
      if (currentY === preY && currentX !== preX) {
        var x2 = currentX > preX ? currentX - space : currentX + space;
        d2 = d2 + " L " + x2 + " " + currentY;
      }
      d2 = d2 + " Q " + currentX + " " + currentY;
      if (currentX === nextX && currentY !== nextY) {
        var y2 = currentY > nextY ? currentY - space : currentY + space;
        d2 = d2 + " " + currentX + " " + y2;
      }
      if (currentY === nextY && currentX !== nextX) {
        var x2 = currentX > nextX ? currentX - space : currentX + space;
        d2 = d2 + " " + x2 + " " + currentY;
      }
    }
    var _f = __read6(points2[points2.length - 1], 2), endX = _f[0], endY = _f[1];
    d2 = d2 + " L " + endX + " " + endY;
    return (0, import_core7.h)("path", {
      d: d2,
      strokeWidth,
      stroke,
      fill: "none",
      strokeDashArray
    });
  };
  CurvedEdgeView2.extendKey = "curvedEdge";
  return CurvedEdgeView2;
}(import_core7.PolylineEdge);
var CurvedEdgeModel = function(_super) {
  __extends7(CurvedEdgeModel2, _super);
  function CurvedEdgeModel2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return CurvedEdgeModel2;
}(import_core7.PolylineEdgeModel);
var CurvedEdge = {
  pluginName: "curved-edge",
  curvedSpace: 5,
  init: function(_a) {
    var curvedSpace = _a.curvedSpace;
    CurvedEdge.curvedSpace = curvedSpace;
  },
  install: function(lf) {
    lf.register({
      type: "curved-edge",
      view: CurvedEdgeView,
      model: CurvedEdgeModel
    });
  }
};

// node_modules/@logicflow/extension/es/materials/group/index.js
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/materials/group/GroupNode.js
init_define_APP_INFO();
var import_core15 = __toESM(require_logic_flow());

// node_modules/@logicflow/extension/es/NodeResize/index.js
init_define_APP_INFO();

// node_modules/@logicflow/extension/es/NodeResize/Node/RectResize.js
init_define_APP_INFO();
var import_core10 = __toESM(require_logic_flow());

// node_modules/@logicflow/extension/es/NodeResize/Control/ControlGroup.js
init_define_APP_INFO();

// node_modules/preact/dist/preact.module.js
init_define_APP_INFO();
var n;
var l;
var u;
var i;
var t;
var o;
var r;
var f;
var e = {};
var c = [];
var s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function a(n2, l2) {
  for (var u2 in l2)
    n2[u2] = l2[u2];
  return n2;
}
function h6(n2) {
  var l2 = n2.parentNode;
  l2 && l2.removeChild(n2);
}
function v(l2, u2, i2) {
  var t2, o2, r2, f2 = {};
  for (r2 in u2)
    r2 == "key" ? t2 = u2[r2] : r2 == "ref" ? o2 = u2[r2] : f2[r2] = u2[r2];
  if (arguments.length > 2 && (f2.children = arguments.length > 3 ? n.call(arguments, 2) : i2), typeof l2 == "function" && l2.defaultProps != null)
    for (r2 in l2.defaultProps)
      f2[r2] === void 0 && (f2[r2] = l2.defaultProps[r2]);
  return y(l2, f2, t2, o2, null);
}
function y(n2, i2, t2, o2, r2) {
  var f2 = { type: n2, props: i2, key: t2, ref: o2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: r2 == null ? ++u : r2 };
  return r2 == null && l.vnode != null && l.vnode(f2), f2;
}
function d(n2) {
  return n2.children;
}
function _(n2, l2) {
  this.props = n2, this.context = l2;
}
function k(n2, l2) {
  if (l2 == null)
    return n2.__ ? k(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
  for (var u2; l2 < n2.__k.length; l2++)
    if ((u2 = n2.__k[l2]) != null && u2.__e != null)
      return u2.__e;
  return typeof n2.type == "function" ? k(n2) : null;
}
function b(n2) {
  var l2, u2;
  if ((n2 = n2.__) != null && n2.__c != null) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)
      if ((u2 = n2.__k[l2]) != null && u2.__e != null) {
        n2.__e = n2.__c.base = u2.__e;
        break;
      }
    return b(n2);
  }
}
function m(n2) {
  (!n2.__d && (n2.__d = true) && t.push(n2) && !g.__r++ || r !== l.debounceRendering) && ((r = l.debounceRendering) || o)(g);
}
function g() {
  for (var n2; g.__r = t.length; )
    n2 = t.sort(function(n3, l2) {
      return n3.__v.__b - l2.__v.__b;
    }), t = [], n2.some(function(n3) {
      var l2, u2, i2, t2, o2, r2;
      n3.__d && (o2 = (t2 = (l2 = n3).__v).__e, (r2 = l2.__P) && (u2 = [], (i2 = a({}, t2)).__v = t2.__v + 1, j(r2, t2, i2, l2.__n, r2.ownerSVGElement !== void 0, t2.__h != null ? [o2] : null, u2, o2 == null ? k(t2) : o2, t2.__h), z(u2, t2), t2.__e != o2 && b(t2)));
    });
}
function w(n2, l2, u2, i2, t2, o2, r2, f2, s2, a2) {
  var h14, v2, p, _2, b2, m2, g2, w2 = i2 && i2.__k || c, A = w2.length;
  for (u2.__k = [], h14 = 0; h14 < l2.length; h14++)
    if ((_2 = u2.__k[h14] = (_2 = l2[h14]) == null || typeof _2 == "boolean" ? null : typeof _2 == "string" || typeof _2 == "number" || typeof _2 == "bigint" ? y(null, _2, null, null, _2) : Array.isArray(_2) ? y(d, { children: _2 }, null, null, null) : _2.__b > 0 ? y(_2.type, _2.props, _2.key, null, _2.__v) : _2) != null) {
      if (_2.__ = u2, _2.__b = u2.__b + 1, (p = w2[h14]) === null || p && _2.key == p.key && _2.type === p.type)
        w2[h14] = void 0;
      else
        for (v2 = 0; v2 < A; v2++) {
          if ((p = w2[v2]) && _2.key == p.key && _2.type === p.type) {
            w2[v2] = void 0;
            break;
          }
          p = null;
        }
      j(n2, _2, p = p || e, t2, o2, r2, f2, s2, a2), b2 = _2.__e, (v2 = _2.ref) && p.ref != v2 && (g2 || (g2 = []), p.ref && g2.push(p.ref, null, _2), g2.push(v2, _2.__c || b2, _2)), b2 != null ? (m2 == null && (m2 = b2), typeof _2.type == "function" && _2.__k === p.__k ? _2.__d = s2 = x(_2, s2, n2) : s2 = P(n2, _2, p, w2, b2, s2), typeof u2.type == "function" && (u2.__d = s2)) : s2 && p.__e == s2 && s2.parentNode != n2 && (s2 = k(p));
    }
  for (u2.__e = m2, h14 = A; h14--; )
    w2[h14] != null && (typeof u2.type == "function" && w2[h14].__e != null && w2[h14].__e == u2.__d && (u2.__d = k(i2, h14 + 1)), N(w2[h14], w2[h14]));
  if (g2)
    for (h14 = 0; h14 < g2.length; h14++)
      M(g2[h14], g2[++h14], g2[++h14]);
}
function x(n2, l2, u2) {
  for (var i2, t2 = n2.__k, o2 = 0; t2 && o2 < t2.length; o2++)
    (i2 = t2[o2]) && (i2.__ = n2, l2 = typeof i2.type == "function" ? x(i2, l2, u2) : P(u2, i2, i2, t2, i2.__e, l2));
  return l2;
}
function P(n2, l2, u2, i2, t2, o2) {
  var r2, f2, e2;
  if (l2.__d !== void 0)
    r2 = l2.__d, l2.__d = void 0;
  else if (u2 == null || t2 != o2 || t2.parentNode == null)
    n:
      if (o2 == null || o2.parentNode !== n2)
        n2.appendChild(t2), r2 = null;
      else {
        for (f2 = o2, e2 = 0; (f2 = f2.nextSibling) && e2 < i2.length; e2 += 2)
          if (f2 == t2)
            break n;
        n2.insertBefore(t2, o2), r2 = o2;
      }
  return r2 !== void 0 ? r2 : t2.nextSibling;
}
function C(n2, l2, u2, i2, t2) {
  var o2;
  for (o2 in u2)
    o2 === "children" || o2 === "key" || o2 in l2 || H(n2, o2, null, u2[o2], i2);
  for (o2 in l2)
    t2 && typeof l2[o2] != "function" || o2 === "children" || o2 === "key" || o2 === "value" || o2 === "checked" || u2[o2] === l2[o2] || H(n2, o2, l2[o2], u2[o2], i2);
}
function $(n2, l2, u2) {
  l2[0] === "-" ? n2.setProperty(l2, u2) : n2[l2] = u2 == null ? "" : typeof u2 != "number" || s.test(l2) ? u2 : u2 + "px";
}
function H(n2, l2, u2, i2, t2) {
  var o2;
  n:
    if (l2 === "style")
      if (typeof u2 == "string")
        n2.style.cssText = u2;
      else {
        if (typeof i2 == "string" && (n2.style.cssText = i2 = ""), i2)
          for (l2 in i2)
            u2 && l2 in u2 || $(n2.style, l2, "");
        if (u2)
          for (l2 in u2)
            i2 && u2[l2] === i2[l2] || $(n2.style, l2, u2[l2]);
      }
    else if (l2[0] === "o" && l2[1] === "n")
      o2 = l2 !== (l2 = l2.replace(/Capture$/, "")), l2 = l2.toLowerCase() in n2 ? l2.toLowerCase().slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + o2] = u2, u2 ? i2 || n2.addEventListener(l2, o2 ? T : I, o2) : n2.removeEventListener(l2, o2 ? T : I, o2);
    else if (l2 !== "dangerouslySetInnerHTML") {
      if (t2)
        l2 = l2.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if (l2 !== "href" && l2 !== "list" && l2 !== "form" && l2 !== "tabIndex" && l2 !== "download" && l2 in n2)
        try {
          n2[l2] = u2 == null ? "" : u2;
          break n;
        } catch (n3) {
        }
      typeof u2 == "function" || (u2 != null && (u2 !== false || l2[0] === "a" && l2[1] === "r") ? n2.setAttribute(l2, u2) : n2.removeAttribute(l2));
    }
}
function I(n2) {
  this.l[n2.type + false](l.event ? l.event(n2) : n2);
}
function T(n2) {
  this.l[n2.type + true](l.event ? l.event(n2) : n2);
}
function j(n2, u2, i2, t2, o2, r2, f2, e2, c2) {
  var s2, h14, v2, y2, p, k2, b2, m2, g2, x2, A, P2 = u2.type;
  if (u2.constructor !== void 0)
    return null;
  i2.__h != null && (c2 = i2.__h, e2 = u2.__e = i2.__e, u2.__h = null, r2 = [e2]), (s2 = l.__b) && s2(u2);
  try {
    n:
      if (typeof P2 == "function") {
        if (m2 = u2.props, g2 = (s2 = P2.contextType) && t2[s2.__c], x2 = s2 ? g2 ? g2.props.value : s2.__ : t2, i2.__c ? b2 = (h14 = u2.__c = i2.__c).__ = h14.__E : ("prototype" in P2 && P2.prototype.render ? u2.__c = h14 = new P2(m2, x2) : (u2.__c = h14 = new _(m2, x2), h14.constructor = P2, h14.render = O), g2 && g2.sub(h14), h14.props = m2, h14.state || (h14.state = {}), h14.context = x2, h14.__n = t2, v2 = h14.__d = true, h14.__h = []), h14.__s == null && (h14.__s = h14.state), P2.getDerivedStateFromProps != null && (h14.__s == h14.state && (h14.__s = a({}, h14.__s)), a(h14.__s, P2.getDerivedStateFromProps(m2, h14.__s))), y2 = h14.props, p = h14.state, v2)
          P2.getDerivedStateFromProps == null && h14.componentWillMount != null && h14.componentWillMount(), h14.componentDidMount != null && h14.__h.push(h14.componentDidMount);
        else {
          if (P2.getDerivedStateFromProps == null && m2 !== y2 && h14.componentWillReceiveProps != null && h14.componentWillReceiveProps(m2, x2), !h14.__e && h14.shouldComponentUpdate != null && h14.shouldComponentUpdate(m2, h14.__s, x2) === false || u2.__v === i2.__v) {
            h14.props = m2, h14.state = h14.__s, u2.__v !== i2.__v && (h14.__d = false), h14.__v = u2, u2.__e = i2.__e, u2.__k = i2.__k, u2.__k.forEach(function(n3) {
              n3 && (n3.__ = u2);
            }), h14.__h.length && f2.push(h14);
            break n;
          }
          h14.componentWillUpdate != null && h14.componentWillUpdate(m2, h14.__s, x2), h14.componentDidUpdate != null && h14.__h.push(function() {
            h14.componentDidUpdate(y2, p, k2);
          });
        }
        h14.context = x2, h14.props = m2, h14.state = h14.__s, (s2 = l.__r) && s2(u2), h14.__d = false, h14.__v = u2, h14.__P = n2, s2 = h14.render(h14.props, h14.state, h14.context), h14.state = h14.__s, h14.getChildContext != null && (t2 = a(a({}, t2), h14.getChildContext())), v2 || h14.getSnapshotBeforeUpdate == null || (k2 = h14.getSnapshotBeforeUpdate(y2, p)), A = s2 != null && s2.type === d && s2.key == null ? s2.props.children : s2, w(n2, Array.isArray(A) ? A : [A], u2, i2, t2, o2, r2, f2, e2, c2), h14.base = u2.__e, u2.__h = null, h14.__h.length && f2.push(h14), b2 && (h14.__E = h14.__ = null), h14.__e = false;
      } else
        r2 == null && u2.__v === i2.__v ? (u2.__k = i2.__k, u2.__e = i2.__e) : u2.__e = L(i2.__e, u2, i2, t2, o2, r2, f2, c2);
    (s2 = l.diffed) && s2(u2);
  } catch (n3) {
    u2.__v = null, (c2 || r2 != null) && (u2.__e = e2, u2.__h = !!c2, r2[r2.indexOf(e2)] = null), l.__e(n3, u2, i2);
  }
}
function z(n2, u2) {
  l.__c && l.__c(u2, n2), n2.some(function(u3) {
    try {
      n2 = u3.__h, u3.__h = [], n2.some(function(n3) {
        n3.call(u3);
      });
    } catch (n3) {
      l.__e(n3, u3.__v);
    }
  });
}
function L(l2, u2, i2, t2, o2, r2, f2, c2) {
  var s2, a2, v2, y2 = i2.props, p = u2.props, d2 = u2.type, _2 = 0;
  if (d2 === "svg" && (o2 = true), r2 != null) {
    for (; _2 < r2.length; _2++)
      if ((s2 = r2[_2]) && "setAttribute" in s2 == !!d2 && (d2 ? s2.localName === d2 : s2.nodeType === 3)) {
        l2 = s2, r2[_2] = null;
        break;
      }
  }
  if (l2 == null) {
    if (d2 === null)
      return document.createTextNode(p);
    l2 = o2 ? document.createElementNS("http://www.w3.org/2000/svg", d2) : document.createElement(d2, p.is && p), r2 = null, c2 = false;
  }
  if (d2 === null)
    y2 === p || c2 && l2.data === p || (l2.data = p);
  else {
    if (r2 = r2 && n.call(l2.childNodes), a2 = (y2 = i2.props || e).dangerouslySetInnerHTML, v2 = p.dangerouslySetInnerHTML, !c2) {
      if (r2 != null)
        for (y2 = {}, _2 = 0; _2 < l2.attributes.length; _2++)
          y2[l2.attributes[_2].name] = l2.attributes[_2].value;
      (v2 || a2) && (v2 && (a2 && v2.__html == a2.__html || v2.__html === l2.innerHTML) || (l2.innerHTML = v2 && v2.__html || ""));
    }
    if (C(l2, p, y2, o2, c2), v2)
      u2.__k = [];
    else if (_2 = u2.props.children, w(l2, Array.isArray(_2) ? _2 : [_2], u2, i2, t2, o2 && d2 !== "foreignObject", r2, f2, r2 ? r2[0] : i2.__k && k(i2, 0), c2), r2 != null)
      for (_2 = r2.length; _2--; )
        r2[_2] != null && h6(r2[_2]);
    c2 || ("value" in p && (_2 = p.value) !== void 0 && (_2 !== l2.value || d2 === "progress" && !_2 || d2 === "option" && _2 !== y2.value) && H(l2, "value", _2, y2.value, false), "checked" in p && (_2 = p.checked) !== void 0 && _2 !== l2.checked && H(l2, "checked", _2, y2.checked, false));
  }
  return l2;
}
function M(n2, u2, i2) {
  try {
    typeof n2 == "function" ? n2(u2) : n2.current = u2;
  } catch (n3) {
    l.__e(n3, i2);
  }
}
function N(n2, u2, i2) {
  var t2, o2;
  if (l.unmount && l.unmount(n2), (t2 = n2.ref) && (t2.current && t2.current !== n2.__e || M(t2, null, u2)), (t2 = n2.__c) != null) {
    if (t2.componentWillUnmount)
      try {
        t2.componentWillUnmount();
      } catch (n3) {
        l.__e(n3, u2);
      }
    t2.base = t2.__P = null;
  }
  if (t2 = n2.__k)
    for (o2 = 0; o2 < t2.length; o2++)
      t2[o2] && N(t2[o2], u2, typeof n2.type != "function");
  i2 || n2.__e == null || h6(n2.__e), n2.__e = n2.__d = void 0;
}
function O(n2, l2, u2) {
  return this.constructor(n2, u2);
}
n = c.slice, l = { __e: function(n2, l2, u2, i2) {
  for (var t2, o2, r2; l2 = l2.__; )
    if ((t2 = l2.__c) && !t2.__)
      try {
        if ((o2 = t2.constructor) && o2.getDerivedStateFromError != null && (t2.setState(o2.getDerivedStateFromError(n2)), r2 = t2.__d), t2.componentDidCatch != null && (t2.componentDidCatch(n2, i2 || {}), r2 = t2.__d), r2)
          return t2.__E = t2;
      } catch (l3) {
        n2 = l3;
      }
  throw n2;
} }, u = 0, i = function(n2) {
  return n2 != null && n2.constructor === void 0;
}, _.prototype.setState = function(n2, l2) {
  var u2;
  u2 = this.__s != null && this.__s !== this.state ? this.__s : this.__s = a({}, this.state), typeof n2 == "function" && (n2 = n2(a({}, u2), this.props)), n2 && a(u2, n2), n2 != null && this.__v && (l2 && this.__h.push(l2), m(this));
}, _.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), m(this));
}, _.prototype.render = d, t = [], o = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g.__r = 0, f = 0;

// node_modules/@logicflow/extension/es/NodeResize/Control/Control.js
init_define_APP_INFO();
var import_core9 = __toESM(require_logic_flow());

// node_modules/@logicflow/extension/es/NodeResize/BasicShape/Rect.js
init_define_APP_INFO();
var import_core8 = __toESM(require_logic_flow());
var __assign6 = function() {
  __assign6 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign6.apply(this, arguments);
};
function Rect(props) {
  var x2 = props.x, y2 = props.y, width = props.width, height = props.height, radius = props.radius, className = props.className;
  var leftTopX = x2 - width / 2;
  var leftTopY = y2 - height / 2;
  var attrs = __assign6(__assign6({
    width: 10,
    height: 10,
    cx: 0,
    cy: 0,
    rx: radius || 0,
    ry: radius || 0,
    fill: "transparent",
    fillOpacity: 1,
    strokeWidth: "1px",
    stroke: "#000",
    strokeOpacity: 1,
    className: "lf-basic-shape " + className
  }, props), { x: leftTopX, y: leftTopY });
  return (0, import_core8.h)("rect", __assign6({}, attrs));
}
Rect.defaultProps = {
  radius: 0,
  stroke: "",
  strokeDasharray: "",
  className: ""
};

// node_modules/@logicflow/extension/es/NodeResize/Control/Util.js
init_define_APP_INFO();
var ModelType;
(function(ModelType2) {
  ModelType2["NODE"] = "node";
  ModelType2["CIRCLE_NODE"] = "circle-node";
  ModelType2["POLYGON_NODE"] = "polygon-node";
  ModelType2["RECT_NODE"] = "rect-node";
  ModelType2["HTML_NODE"] = "html-node";
  ModelType2["TEXT_NODE"] = "text-node";
  ModelType2["ELLIPSE_NODE"] = "ellipse-node";
  ModelType2["DIAMOND_NODE"] = "diamond-node";
  ModelType2["EDGE"] = "edge";
  ModelType2["LINE_EDGE"] = "line-edge";
  ModelType2["POLYLINE_EDGE"] = "polyline-edge";
  ModelType2["BEZIER_EDGE"] = "bezier-edge";
  ModelType2["GRAPH"] = "graph";
})(ModelType || (ModelType = {}));
function getNodeBox(node) {
  var x2 = node.x, y2 = node.y, width = node.width, height = node.height;
  return {
    minX: x2 - width / 2,
    minY: y2 - height / 2,
    maxX: x2 + width / 2,
    maxY: y2 + height / 2
  };
}
function getRidusCenter(node) {
  var nodeBox = getNodeBox(node);
  var radius = node.radius;
  var minX = nodeBox.minX, minY = nodeBox.minY, maxX = nodeBox.maxX, maxY = nodeBox.maxY;
  return [
    {
      x: minX + radius,
      y: minY + radius
    },
    {
      x: maxX - radius,
      y: minY + radius
    },
    {
      x: maxX - radius,
      y: maxY - radius
    },
    {
      x: minX + radius,
      y: maxY - radius
    }
  ];
}
function getRectReizeEdgePoint(_a) {
  var point = _a.point, beforeNode = _a.beforeNode, afterNode = _a.afterNode;
  var x2 = point.x, y2 = point.y;
  var afterPoint = {
    x: x2,
    y: y2
  };
  var radius = beforeNode.radius;
  var beforeNodeBox = getNodeBox(beforeNode);
  var afterNodeBox = getNodeBox(afterNode);
  if (x2 === beforeNodeBox.minX) {
    afterPoint.x = afterNodeBox.minX;
    var pct = (y2 - beforeNode.y) / (beforeNode.height / 2 - radius);
    if (pct) {
      afterPoint.y = afterNode.y + (afterNode.height / 2 - radius) * pct;
    } else {
      afterPoint.y = afterNode.y;
    }
  } else if (x2 === beforeNodeBox.maxX) {
    afterPoint.x = afterNodeBox.maxX;
    var pct = (y2 - beforeNode.y) / (beforeNode.height / 2 - radius);
    if (pct) {
      afterPoint.y = afterNode.y + (afterNode.height / 2 - radius) * pct;
    } else {
      afterPoint.y = afterNode.y;
    }
  } else if (y2 === beforeNodeBox.minY) {
    afterPoint.y = afterNodeBox.minY;
    var pct = (x2 - beforeNode.x) / (beforeNode.width / 2 - radius);
    if (pct) {
      afterPoint.x = afterNode.x + (afterNode.width / 2 - radius) * pct;
    } else {
      afterPoint.x = afterNode.x;
    }
  } else if (y2 === beforeNodeBox.maxY) {
    afterPoint.y = afterNodeBox.maxY;
    var pct = (x2 - beforeNode.x) / (beforeNode.width / 2 - radius);
    if (pct) {
      afterPoint.x = afterNode.x + (afterNode.width / 2 - radius) * pct;
    } else {
      afterPoint.x = afterNode.x;
    }
  } else {
    var beeforCoc = getRidusCenter(beforeNode);
    var afterCoc = getRidusCenter(afterNode);
    var nodeBox = getNodeBox(beforeNode);
    var minX = nodeBox.minX, minY = nodeBox.minY, maxX = nodeBox.maxX, maxY = nodeBox.maxY;
    var index = -1;
    if (x2 - minX < radius && y2 - minY < radius) {
      index = 0;
    } else if (maxX - x2 < radius && y2 - minY < radius) {
      index = 1;
    } else if (maxX - x2 < radius && maxY - y2 < radius) {
      index = 2;
    } else if (x2 - minX < radius && minY - y2 < radius) {
      index = 3;
    }
    if (index > -1) {
      var angle = Math.atan2(y2 - beeforCoc[index].y, x2 - beeforCoc[index].x);
      afterPoint.x = afterCoc[index].x + radius * Math.cos(angle);
      afterPoint.y = afterCoc[index].y + radius * Math.sin(angle);
    }
  }
  return afterPoint;
}
function getEllipseReizeEdgePoint(_a) {
  var point = _a.point, beforeNode = _a.beforeNode, afterNode = _a.afterNode;
  var rx = afterNode.rx, ry = afterNode.ry;
  var afterPoint = point;
  var tan = (point.y - beforeNode.y) / (point.x - beforeNode.x);
  var a2 = rx;
  var b2 = ry;
  var x2;
  var y2;
  if (tan >= Infinity) {
    x2 = 0;
    y2 = b2;
  } else if (tan <= -Infinity) {
    x2 = 0;
    y2 = -b2;
  } else if (point.x - beforeNode.x > 0) {
    x2 = a2 * b2 / Math.sqrt(b2 * b2 + a2 * a2 * tan * tan);
    y2 = a2 * b2 * tan / Math.sqrt(b2 * b2 + a2 * a2 * tan * tan);
  } else {
    x2 = -(a2 * b2) / Math.sqrt(b2 * b2 + a2 * a2 * tan * tan);
    y2 = -(a2 * b2 * tan) / Math.sqrt(b2 * b2 + a2 * a2 * tan * tan);
  }
  afterPoint = { x: x2 + afterNode.x, y: y2 + afterNode.y };
  return afterPoint;
}
function getDiamondReizeEdgePoint(_a) {
  var point = _a.point, beforeNode = _a.beforeNode, afterNode = _a.afterNode;
  var afterPoint = point;
  var x2;
  var y2;
  var px = point.x - beforeNode.x;
  var py = point.y - beforeNode.y;
  var rxBefore = beforeNode.rx;
  var ryBefore = beforeNode.ry;
  var pct = Math.sqrt((rxBefore - Math.abs(px)) * (rxBefore - Math.abs(px)) + py * py) / Math.sqrt(rxBefore * rxBefore + ryBefore * ryBefore);
  var rxAfter = afterNode.rx;
  var ryAfter = afterNode.ry;
  var a2 = Math.sqrt((rxAfter * rxAfter + ryAfter * ryAfter) * pct * pct * (rxAfter * rxAfter / (rxAfter * rxAfter + ryAfter * ryAfter)));
  var b2 = a2 * (ryAfter / rxAfter);
  if (px >= 0) {
    x2 = rxAfter - a2;
  } else {
    x2 = a2 - rxAfter;
  }
  if (py > 0) {
    y2 = b2;
  } else {
    y2 = -b2;
  }
  afterPoint = {
    x: x2 + afterNode.x,
    y: y2 + afterNode.y
  };
  return afterPoint;
}

// node_modules/@logicflow/extension/es/NodeResize/Control/Control.js
var __extends8 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign7 = function() {
  __assign7 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign7.apply(this, arguments);
};
var StepDrag = import_core9.LogicFlowUtil.StepDrag;
var Control2 = function(_super) {
  __extends8(Control3, _super);
  function Control3(props) {
    var _this = _super.call(this) || this;
    _this.updatePosition = function(_a) {
      var deltaX = _a.deltaX, deltaY = _a.deltaY;
      var _b = _this.nodeModel, x2 = _b.x, y2 = _b.y;
      _this.nodeModel.x = x2 + deltaX / 2;
      _this.nodeModel.y = y2 + deltaY / 2;
      _this.nodeModel.moveText(deltaX / 2, deltaY / 2);
    };
    _this.getResize = function(_a) {
      var index = _a.index, deltaX = _a.deltaX, deltaY = _a.deltaY, width = _a.width, height = _a.height, _b = _a.pct, pct = _b === void 0 ? 1 : _b;
      var resize = { width, height };
      switch (index) {
        case 0:
          resize.width = width - deltaX * pct;
          resize.height = height - deltaY * pct;
          break;
        case 1:
          resize.width = width + deltaX * pct;
          resize.height = height - deltaY * pct;
          break;
        case 2:
          resize.width = width + deltaX;
          resize.height = height + deltaY * pct;
          break;
        case 3:
          resize.width = width - deltaX * pct;
          resize.height = height + deltaY * pct;
          break;
        default:
          break;
      }
      return resize;
    };
    _this.updateRect = function(_a) {
      var deltaX = _a.deltaX, deltaY = _a.deltaY;
      var _b = _this.nodeModel, id = _b.id, x2 = _b.x, y2 = _b.y, width = _b.width, height = _b.height, radius = _b.radius;
      var index = _this.index;
      var size = _this.getResize({
        index,
        deltaX,
        deltaY,
        width,
        height,
        pct: 1
      });
      var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;
      if (size.width < minWidth || size.width > maxWidth || size.height < minHeight || size.height > maxHeight) {
        _this.dragHandler.cancelDrag();
        return;
      }
      _this.updatePosition({ deltaX, deltaY });
      _this.nodeModel.width = size.width;
      _this.nodeModel.height = size.height;
      _this.nodeModel.setProperties({
        nodeSize: {
          width: size.width,
          height: size.height
        }
      });
      var edges = _this.getNodeEdges(id);
      var beforeNode = {
        x: x2,
        y: y2,
        width,
        height,
        radius
      };
      var afterNode = {
        x: _this.nodeModel.x,
        y: _this.nodeModel.y,
        width: _this.nodeModel.width,
        height: _this.nodeModel.height,
        radius
      };
      var params = {
        point: "",
        beforeNode,
        afterNode
      };
      var afterPoint;
      edges.sourceEdges.forEach(function(item) {
        params.point = item.startPoint;
        afterPoint = getRectReizeEdgePoint(params);
        item.updateStartPoint(afterPoint);
      });
      edges.targetEdges.forEach(function(item) {
        params.point = item.endPoint;
        afterPoint = getRectReizeEdgePoint(params);
        item.updateEndPoint(afterPoint);
      });
      _this.eventEmit({ beforeNode, afterNode });
    };
    _this.updateEllipse = function(_a) {
      var deltaX = _a.deltaX, deltaY = _a.deltaY;
      var _b = _this.nodeModel, id = _b.id, rx = _b.rx, ry = _b.ry, x2 = _b.x, y2 = _b.y;
      var index = _this.index;
      var width = rx;
      var height = ry;
      var size = _this.getResize({
        index,
        deltaX,
        deltaY,
        width,
        height,
        pct: 1 / 2
      });
      var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;
      if (size.width < minWidth / 2 || size.width > maxWidth / 2 || size.height < minHeight / 2 || size.height > maxHeight / 2) {
        _this.dragHandler.cancelDrag();
        return;
      }
      _this.updatePosition({ deltaX, deltaY });
      _this.nodeModel.rx = _this.nodeModel.rx + deltaX / 2;
      _this.nodeModel.ry = _this.nodeModel.ry + deltaY / 2;
      _this.nodeModel.setProperties({
        nodeSize: {
          rx: size.width,
          ry: size.height
        }
      });
      var edges = _this.getNodeEdges(id);
      var beforeNode = { x: x2, y: y2 };
      var afterNode = {
        rx: size.width,
        ry: size.height,
        x: _this.nodeModel.x,
        y: _this.nodeModel.y
      };
      var params = {
        point: {},
        beforeNode,
        afterNode
      };
      var afterPoint;
      edges.sourceEdges.forEach(function(item) {
        params.point = item.startPoint;
        afterPoint = getEllipseReizeEdgePoint(params);
        item.updateStartPoint(afterPoint);
      });
      edges.targetEdges.forEach(function(item) {
        params.point = item.endPoint;
        afterPoint = getEllipseReizeEdgePoint(params);
        item.updateEndPoint(afterPoint);
      });
      _this.eventEmit({ beforeNode: __assign7(__assign7({}, beforeNode), { rx, ry }), afterNode });
    };
    _this.updateDiamond = function(_a) {
      var deltaX = _a.deltaX, deltaY = _a.deltaY;
      var _b = _this.nodeModel, id = _b.id, rx = _b.rx, ry = _b.ry, x2 = _b.x, y2 = _b.y;
      var index = _this.index;
      var width = rx;
      var height = ry;
      var size = _this.getResize({
        index,
        deltaX,
        deltaY,
        width,
        height,
        pct: 1 / 2
      });
      var _c = _this.nodeModel, minWidth = _c.minWidth, minHeight = _c.minHeight, maxWidth = _c.maxWidth, maxHeight = _c.maxHeight;
      if (size.width < minWidth / 2 || size.width > maxWidth / 2 || size.height < minHeight / 2 || size.height > maxHeight / 2) {
        _this.dragHandler.cancelDrag();
        return;
      }
      _this.updatePosition({ deltaX, deltaY });
      _this.nodeModel.rx = _this.nodeModel.rx + deltaX / 2;
      _this.nodeModel.ry = _this.nodeModel.ry + deltaY / 2;
      _this.nodeModel.setProperties({
        nodeSize: {
          rx: size.width,
          ry: size.height
        }
      });
      var beforeNode = { x: x2, y: y2, rx, ry };
      var afterNode = {
        rx: size.width,
        ry: size.height,
        x: _this.nodeModel.x,
        y: _this.nodeModel.y
      };
      var params = {
        point: {},
        beforeNode,
        afterNode
      };
      var afterPoint;
      var edges = _this.getNodeEdges(id);
      edges.sourceEdges.forEach(function(item) {
        params.point = item.startPoint;
        afterPoint = getDiamondReizeEdgePoint(params);
        item.updateStartPoint(afterPoint);
      });
      edges.targetEdges.forEach(function(item) {
        params.point = item.endPoint;
        afterPoint = getDiamondReizeEdgePoint(params);
        item.updateEndPoint(afterPoint);
      });
      _this.eventEmit({ beforeNode, afterNode });
    };
    _this.eventEmit = function(_a) {
      var beforeNode = _a.beforeNode, afterNode = _a.afterNode;
      var _b = _this.nodeModel, id = _b.id, modelType = _b.modelType, type = _b.type;
      var oldNodeSize = __assign7({ id, modelType, type }, beforeNode);
      var newNodeSize = __assign7({ id, modelType, type }, afterNode);
      _this.graphModel.eventCenter.emit("node:resize", { oldNodeSize, newNodeSize });
    };
    _this.onDraging = function(_a) {
      var deltaX = _a.deltaX, deltaY = _a.deltaY;
      var modelType = _this.nodeModel.modelType;
      if (modelType === ModelType.RECT_NODE || modelType === ModelType.HTML_NODE) {
        _this.updateRect({ deltaX, deltaY });
      } else if (modelType === ModelType.ELLIPSE_NODE) {
        _this.updateEllipse({ deltaX, deltaY });
      } else if (modelType === ModelType.DIAMOND_NODE) {
        _this.updateDiamond({ deltaX, deltaY });
      }
    };
    _this.index = props.index;
    _this.nodeModel = props.model;
    _this.graphModel = props.graphModel;
    var gridSize = _this.graphModel.gridSize;
    var step = 2;
    if (gridSize > 1) {
      step = 2 * gridSize;
    }
    if (_this.nodeModel.gridSize) {
      step = 2 * _this.nodeModel.gridSize;
    }
    _this.state = {};
    _this.dragHandler = new StepDrag({
      onDraging: _this.onDraging,
      step
    });
    return _this;
  }
  Control3.prototype.getNodeEdges = function(nodeId) {
    var graphModel = this.graphModel;
    var edges = graphModel.edges;
    var sourceEdges = [];
    var targetEdges = [];
    for (var i2 = 0; i2 < edges.length; i2++) {
      var edgeModel = edges[i2];
      if (edgeModel.sourceNodeId === nodeId) {
        sourceEdges.push(edgeModel);
      } else if (edges[i2].targetNodeId === nodeId) {
        targetEdges.push(edgeModel);
      }
    }
    return { sourceEdges, targetEdges };
  };
  Control3.prototype.render = function() {
    var _a = this.props, x2 = _a.x, y2 = _a.y, index = _a.index, model = _a.model;
    var style = model.getControlPointStyle();
    return v("g", { className: "lf-resize-control-" + index }, v(Rect, __assign7({ className: "lf-node-control" }, { x: x2, y: y2 }, style, { onMouseDown: this.dragHandler.handleMouseDown })));
  };
  return Control3;
}(_);
var Control_default = Control2;

// node_modules/@logicflow/extension/es/NodeResize/Control/ControlGroup.js
var __extends9 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign8 = function() {
  __assign8 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign8.apply(this, arguments);
};
var ControlGroup = function(_super) {
  __extends9(ControlGroup2, _super);
  function ControlGroup2() {
    var _this = _super.call(this) || this;
    _this.state = {};
    return _this;
  }
  ControlGroup2.prototype.getResizeControl = function() {
    var _a = this.props, model = _a.model, graphModel = _a.graphModel;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height;
    var box = {
      minX: x2 - width / 2,
      minY: y2 - height / 2,
      maxX: x2 + width / 2,
      maxY: y2 + height / 2
    };
    var minX = box.minX, minY = box.minY, maxX = box.maxX, maxY = box.maxY;
    var controlList = [
      {
        x: minX,
        y: minY
      },
      {
        x: maxX,
        y: minY
      },
      {
        x: maxX,
        y: maxY
      },
      {
        x: minX,
        y: maxY
      }
    ];
    return controlList.map(function(control, index) {
      return v(Control_default, __assign8({ index }, control, { model, graphModel }));
    });
  };
  ControlGroup2.prototype.getGroupSolid = function() {
    var model = this.props.model;
    var x2 = model.x, y2 = model.y, width = model.width, height = model.height;
    var style = model.getResizeOutlineStyle();
    return v(Rect, __assign8({ fill: "none" }, style, { x: x2, y: y2, width, height }));
  };
  ControlGroup2.prototype.render = function() {
    return v("g", { className: "lf-resize-control" }, this.getGroupSolid(), this.getResizeControl());
  };
  return ControlGroup2;
}(_);
var ControlGroup_default = ControlGroup;

// node_modules/@logicflow/extension/es/NodeResize/Node/RectResize.js
var __extends10 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var RectResizeModel = function(_super) {
  __extends10(RectResizeModel2, _super);
  function RectResizeModel2(data, graphModel) {
    var _this = _super.call(this, data, graphModel) || this;
    var nodeSize = _this.properties.nodeSize;
    if (nodeSize) {
      _this.width = nodeSize.width;
      _this.height = nodeSize.height;
    }
    return _this;
  }
  RectResizeModel2.prototype.initNodeData = function(data) {
    _super.prototype.initNodeData.call(this, data);
    this.minWidth = 30;
    this.minHeight = 30;
    this.maxWidth = 2e3;
    this.maxHeight = 2e3;
  };
  RectResizeModel2.prototype.getOutlineStyle = function() {
    var style = _super.prototype.getOutlineStyle.call(this);
    style.stroke = "none";
    if (style.hover) {
      style.hover.stroke = "none";
    }
    return style;
  };
  RectResizeModel2.prototype.getResizeOutlineStyle = function() {
    return {
      fill: "none",
      stroke: "transparent",
      strokeWidth: 1,
      strokeDasharray: "3,3"
    };
  };
  RectResizeModel2.prototype.getControlPointStyle = function() {
    return {
      width: 7,
      height: 7,
      fill: "#FFFFFF",
      stroke: "#000000"
    };
  };
  RectResizeModel2.prototype.resize = function(deltaX, deltaY) {
    console.log(deltaX, deltaY);
  };
  return RectResizeModel2;
}(import_core10.RectNodeModel);
var RectResizeView = function(_super) {
  __extends10(RectResizeView2, _super);
  function RectResizeView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  RectResizeView2.prototype.getControlGroup = function() {
    var _a = this.props, model = _a.model, graphModel = _a.graphModel;
    return (0, import_core10.h)(ControlGroup_default, { model, graphModel });
  };
  RectResizeView2.prototype.getResizeShape = function() {
    return _super.prototype.getShape.call(this);
  };
  RectResizeView2.prototype.getShape = function() {
    var isSelected = this.props.model.isSelected;
    return (0, import_core10.h)("g", null, this.getResizeShape(), isSelected ? this.getControlGroup() : "");
  };
  return RectResizeView2;
}(import_core10.RectNode);
var RectResize = {
  type: "rect",
  view: RectResizeView,
  model: RectResizeModel
};
var RectResize_default = RectResize;

// node_modules/@logicflow/extension/es/NodeResize/Node/EllipseResize.js
init_define_APP_INFO();
var import_core11 = __toESM(require_logic_flow());
var __extends11 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var EllipseResizeModel = function(_super) {
  __extends11(EllipseResizeModel2, _super);
  function EllipseResizeModel2(data, graphModel) {
    var _this = _super.call(this, data, graphModel) || this;
    var nodeSize = _this.properties.nodeSize;
    if (nodeSize) {
      _this.rx = nodeSize.rx;
      _this.ry = nodeSize.ry;
    }
    return _this;
  }
  EllipseResizeModel2.prototype.initNodeData = function(data) {
    _super.prototype.initNodeData.call(this, data);
    this.minWidth = 30;
    this.minHeight = 30;
    this.maxWidth = 2e3;
    this.maxHeight = 2e3;
  };
  EllipseResizeModel2.prototype.getOutlineStyle = function() {
    var style = _super.prototype.getOutlineStyle.call(this);
    style.stroke = "none";
    if (style.hover) {
      style.hover.stroke = "none";
    }
    return style;
  };
  EllipseResizeModel2.prototype.getResizeOutlineStyle = function() {
    return {
      stroke: "#000000",
      strokeWidth: 1,
      strokeDasharray: "3,3"
    };
  };
  EllipseResizeModel2.prototype.getControlPointStyle = function() {
    return {
      width: 7,
      height: 7,
      fill: "#FFFFFF",
      stroke: "#000000"
    };
  };
  return EllipseResizeModel2;
}(import_core11.EllipseNodeModel);
var EllipseResizeView = function(_super) {
  __extends11(EllipseResizeView2, _super);
  function EllipseResizeView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  EllipseResizeView2.prototype.getControlGroup = function() {
    var _a = this.props, model = _a.model, graphModel = _a.graphModel;
    return (0, import_core11.h)(ControlGroup_default, { model, graphModel });
  };
  EllipseResizeView2.prototype.getResizeShape = function() {
    return _super.prototype.getShape.call(this);
  };
  EllipseResizeView2.prototype.getShape = function() {
    var model = this.props.model;
    return (0, import_core11.h)("g", null, this.getResizeShape(), model.isSelected ? this.getControlGroup() : "");
  };
  return EllipseResizeView2;
}(import_core11.EllipseNode);
var EllipseResize = {
  type: "ellipse",
  view: EllipseResizeView,
  model: EllipseResizeModel
};
var EllipseResize_default = EllipseResize;

// node_modules/@logicflow/extension/es/NodeResize/Node/DiamondResize.js
init_define_APP_INFO();
var import_core13 = __toESM(require_logic_flow());

// node_modules/@logicflow/extension/es/NodeResize/BasicShape/Polygon.js
init_define_APP_INFO();
var import_core12 = __toESM(require_logic_flow());
var __assign9 = function() {
  __assign9 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign9.apply(this, arguments);
};
function Polygon(_a) {
  var _b = _a.fillOpacity, fillOpacity = _b === void 0 ? 1 : _b, _c = _a.strokeWidth, strokeWidth = _c === void 0 ? 1 : _c, _d = _a.strokeOpacity, strokeOpacity = _d === void 0 ? 1 : _d, _e = _a.fill, fill = _e === void 0 ? "transparent" : _e, _f = _a.stroke, stroke = _f === void 0 ? "#000" : _f, points = _a.points, _g = _a.className, className = _g === void 0 ? "lf-basic-shape" : _g;
  var attrs = {
    fill,
    fillOpacity,
    strokeWidth,
    stroke,
    strokeOpacity,
    points: "",
    className
  };
  attrs.points = points.map(function(point) {
    return point.join(",");
  }).join(" ");
  return (0, import_core12.h)("polygon", __assign9({}, attrs));
}

// node_modules/@logicflow/extension/es/NodeResize/Node/DiamondResize.js
var __extends12 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign10 = function() {
  __assign10 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign10.apply(this, arguments);
};
var DiamondResizeModel = function(_super) {
  __extends12(DiamondResizeModel2, _super);
  function DiamondResizeModel2(data, graphModel) {
    var _this = _super.call(this, data, graphModel) || this;
    var nodeSize = _this.properties.nodeSize;
    if (nodeSize) {
      _this.rx = nodeSize.rx;
      _this.ry = nodeSize.ry;
    }
    return _this;
  }
  DiamondResizeModel2.prototype.initNodeData = function(data) {
    _super.prototype.initNodeData.call(this, data);
    this.minWidth = 30;
    this.minHeight = 30;
    this.maxWidth = 2e3;
    this.maxHeight = 2e3;
    this.gridSize = 1;
  };
  DiamondResizeModel2.prototype.getOutlineStyle = function() {
    var style = _super.prototype.getOutlineStyle.call(this);
    style.stroke = "none";
    if (style.hover) {
      style.hover.stroke = "none";
    }
    return style;
  };
  DiamondResizeModel2.prototype.getResizeOutlineStyle = function() {
    return {
      stroke: "#000000",
      strokeWidth: 1,
      strokeDasharray: "3,3"
    };
  };
  DiamondResizeModel2.prototype.getControlPointStyle = function() {
    return {
      width: 7,
      height: 7,
      fill: "#FFFFFF",
      stroke: "#000000"
    };
  };
  return DiamondResizeModel2;
}(import_core13.DiamondNodeModel);
var DiamondResizeView = function(_super) {
  __extends12(DiamondResizeView2, _super);
  function DiamondResizeView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DiamondResizeView2.prototype.getControlGroup = function() {
    var _a = this.props, model = _a.model, graphModel = _a.graphModel;
    return (0, import_core13.h)(ControlGroup_default, { model, graphModel });
  };
  DiamondResizeView2.prototype.getResizeShape = function() {
    var model = this.props.model;
    var points = model.points;
    var style = model.getNodeStyle();
    return (0, import_core13.h)("g", null, (0, import_core13.h)(Polygon, __assign10({}, style, { points })));
  };
  DiamondResizeView2.prototype.getShape = function() {
    var isSelected = this.props.model.isSelected;
    return (0, import_core13.h)("g", null, this.getResizeShape(), isSelected ? this.getControlGroup() : "");
  };
  return DiamondResizeView2;
}(import_core13.DiamondNode);
var EllipseResize2 = {
  type: "diamond",
  view: DiamondResizeView,
  model: DiamondResizeModel
};
var DiamondResize_default = EllipseResize2;

// node_modules/@logicflow/extension/es/NodeResize/Node/HtmlResize.js
init_define_APP_INFO();
var import_core14 = __toESM(require_logic_flow());
var __extends13 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var HtmlResizeModel = function(_super) {
  __extends13(HtmlResizeModel2, _super);
  function HtmlResizeModel2(data, graphModel) {
    var _this = _super.call(this, data, graphModel) || this;
    var nodeSize = _this.properties.nodeSize;
    if (nodeSize) {
      _this.width = nodeSize.width;
      _this.height = nodeSize.height;
    }
    return _this;
  }
  HtmlResizeModel2.prototype.initNodeData = function(data) {
    _super.prototype.initNodeData.call(this, data);
    this.minWidth = 30;
    this.minHeight = 30;
    this.maxWidth = 2e3;
    this.maxHeight = 2e3;
  };
  HtmlResizeModel2.prototype.getOutlineStyle = function() {
    var style = _super.prototype.getOutlineStyle.call(this);
    style.stroke = "none";
    if (style.hover) {
      style.hover.stroke = "none";
    }
    return style;
  };
  HtmlResizeModel2.prototype.getResizeOutlineStyle = function() {
    return {
      stroke: "#000000",
      strokeWidth: 1,
      strokeDasharray: "3,3"
    };
  };
  HtmlResizeModel2.prototype.getControlPointStyle = function() {
    return {
      width: 7,
      height: 7,
      fill: "#FFFFFF",
      stroke: "#000000"
    };
  };
  return HtmlResizeModel2;
}(import_core14.HtmlNodeModel);
var HtmlResizeView = function(_super) {
  __extends13(HtmlResizeView2, _super);
  function HtmlResizeView2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  HtmlResizeView2.prototype.getControlGroup = function() {
    var _a = this.props, model = _a.model, graphModel = _a.graphModel;
    return (0, import_core14.h)(ControlGroup_default, { model, graphModel });
  };
  HtmlResizeView2.prototype.getResizeShape = function() {
    return _super.prototype.getShape.call(this);
  };
  HtmlResizeView2.prototype.getShape = function() {
    var isSelected = this.props.model.isSelected;
    return (0, import_core14.h)("g", null, this.getResizeShape(), isSelected ? this.getControlGroup() : "");
  };
  return HtmlResizeView2;
}(import_core14.HtmlNode);
var HtmlResize = {
  type: "html",
  view: HtmlResizeView,
  model: HtmlResizeModel
};
var HtmlResize_default = HtmlResize;

// node_modules/@logicflow/extension/es/NodeResize/index.js
var NodeResize = {
  pluginName: "nodeResize",
  step: 0,
  install: function(lf) {
    lf.register({
      type: RectResize_default.type,
      view: RectResize_default.view,
      model: RectResize_default.model
    });
    lf.register({
      type: EllipseResize_default.type,
      view: EllipseResize_default.view,
      model: EllipseResize_default.model
    });
    lf.register({
      type: DiamondResize_default.type,
      view: DiamondResize_default.view,
      model: DiamondResize_default.model
    });
    lf.register({
      type: HtmlResize_default.type,
      view: HtmlResize_default.view,
      model: HtmlResize_default.model
    });
  }
};

// node_modules/@logicflow/extension/es/materials/group/GroupNode.js
var __extends14 = function() {
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p in b3)
        if (b3.hasOwnProperty(p))
          d3[p] = b3[p];
    };
    return extendStatics(d2, b2);
  };
  return function(d2, b2) {
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign11 = function() {
  __assign11 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign11.apply(this, arguments);
};
var __read7 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spread4 = function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read7(arguments[i2]));
  return ar;
};
var defaultWidth = 500;
var defaultHeight = 300;
var GroupNodeModel = function(_super) {
  __extends14(GroupNodeModel2, _super);
  function GroupNodeModel2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.isGroup = true;
    _this.unfoldedWidth = defaultWidth;
    _this.unfoldedHight = defaultHeight;
    return _this;
  }
  GroupNodeModel2.prototype.initNodeData = function(data) {
    var _this = this;
    _super.prototype.initNodeData.call(this, data);
    var children = [];
    if (Array.isArray(data.children)) {
      children = data.children;
    }
    this.children = new Set(children);
    this.width = defaultWidth;
    this.height = defaultHeight;
    this.foldedWidth = 80;
    this.foldedHeight = 60;
    this.zIndex = -1;
    this.radius = 0;
    this.text.editable = false;
    this.text.draggable = false;
    this.isRestrict = false;
    this.resizable = false;
    this.autoToFront = false;
    this.foldable = false;
    if (this.properties.isFolded === void 0) {
      this.properties.isFolded = false;
    }
    this.isFolded = this.properties.isFolded;
    setTimeout(function() {
      _this.isFolded && _this.foldGroup(_this.isFolded);
    });
  };
  GroupNodeModel2.prototype.getResizeOutlineStyle = function() {
    var style = _super.prototype.getResizeOutlineStyle.call(this);
    style.stroke = "none";
    return style;
  };
  GroupNodeModel2.prototype.foldGroup = function(isFolded) {
    var _this = this;
    this.setProperty("isFolded", isFolded);
    this.isFolded = isFolded;
    if (isFolded) {
      this.x = this.x - this.width / 2 + this.foldedWidth / 2;
      this.y = this.y - this.height / 2 + this.foldedHeight / 2;
      this.unfoldedWidth = this.width;
      this.unfoldedHight = this.height;
      this.width = this.foldedWidth;
      this.height = this.foldedHeight;
    } else {
      this.width = this.unfoldedWidth;
      this.height = this.unfoldedHight;
      this.x = this.x + this.width / 2 - this.foldedWidth / 2;
      this.y = this.y + this.height / 2 - this.foldedHeight / 2;
    }
    var allEdges = this.incoming.edges.concat(this.outgoing.edges);
    this.children.forEach(function(elementId) {
      var nodeModel = _this.graphModel.getElement(elementId);
      nodeModel.visible = !isFolded;
      allEdges = allEdges.concat(nodeModel.incoming.edges.concat(nodeModel.outgoing.edges));
    });
    this.foldEdge(isFolded, allEdges);
  };
  GroupNodeModel2.prototype.getAnchorStyle = function(anchorInfo) {
    var style = _super.prototype.getAnchorStyle.call(this, anchorInfo);
    style.stroke = "transparent";
    style.fill = "transparent";
    style.hover.fill = "transparent";
    style.hover.stroke = "transparent";
    return style;
  };
  GroupNodeModel2.prototype.foldEdge = function(isFolded, allEdges) {
    var _this = this;
    allEdges.forEach(function(edgeModel, index) {
      var id = edgeModel.id, sourceNodeId = edgeModel.sourceNodeId, targetNodeId = edgeModel.targetNodeId, startPoint = edgeModel.startPoint, endPoint = edgeModel.endPoint, type = edgeModel.type, properties = edgeModel.properties, text = edgeModel.text;
      var data = {
        id: id + "__" + index,
        sourceNodeId,
        targetNodeId,
        startPoint,
        endPoint,
        type,
        properties,
        text: text === null || text === void 0 ? void 0 : text.value
      };
      if (edgeModel.virtual) {
        _this.graphModel.deleteEdgeById(edgeModel.id);
      }
      var targetNodeIdGroup = _this.graphModel.group.getNodeGroup(targetNodeId);
      if (!targetNodeIdGroup) {
        targetNodeIdGroup = _this.graphModel.getNodeModelById(targetNodeId);
      }
      var sourceNodeIdGroup = _this.graphModel.group.getNodeGroup(sourceNodeId);
      if (!sourceNodeIdGroup) {
        sourceNodeIdGroup = _this.graphModel.getNodeModelById(sourceNodeId);
      }
      if (isFolded && edgeModel.visible !== false) {
        if (_this.children.has(sourceNodeId) || _this.id === sourceNodeId) {
          data.startPoint = void 0;
          data.sourceNodeId = _this.id;
        } else {
          data.endPoint = void 0;
          data.targetNodeId = _this.id;
        }
        if (targetNodeIdGroup.id !== _this.id || sourceNodeIdGroup.id !== _this.id) {
          _this.createVirtualEdge(data);
        }
        edgeModel.visible = false;
      }
      if (!isFolded && edgeModel.visible === false) {
        if (targetNodeIdGroup && targetNodeIdGroup.isGroup && targetNodeIdGroup.isFolded) {
          data.targetNodeId = targetNodeIdGroup.id;
          data.endPoint = void 0;
          _this.createVirtualEdge(data);
        } else if (sourceNodeIdGroup && sourceNodeIdGroup.isGroup && sourceNodeIdGroup.isFolded) {
          data.sourceNodeId = sourceNodeIdGroup.id;
          data.startPoint = void 0;
          _this.createVirtualEdge(data);
        } else {
          edgeModel.visible = true;
        }
      }
    });
  };
  GroupNodeModel2.prototype.createVirtualEdge = function(edgeData) {
    edgeData.pointsList = void 0;
    var model = this.graphModel.addEdge(edgeData);
    model.virtual = true;
    model.getData = function() {
      return null;
    };
    model.text.editable = false;
    model.isFoldedEdge = true;
  };
  GroupNodeModel2.prototype.isInRange = function(_a) {
    var x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
    return x1 >= this.x - this.width / 2 && x2 <= this.x + this.width / 2 && y1 >= this.y - this.height / 2 && y2 <= this.y + this.height / 2;
  };
  GroupNodeModel2.prototype.isAllowMoveTo = function(_a) {
    var x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
    return {
      x: x1 >= this.x - this.width / 2 && x2 <= this.x + this.width / 2,
      y: y1 >= this.y - this.height / 2 && y2 <= this.y + this.height / 2
    };
  };
  GroupNodeModel2.prototype.setAllowAppendChild = function(isAllow) {
    this.setProperty("groupAddable", isAllow);
  };
  GroupNodeModel2.prototype.addChild = function(id) {
    this.children.add(id);
  };
  GroupNodeModel2.prototype.removeChild = function(id) {
    this.children.delete(id);
  };
  GroupNodeModel2.prototype.getAddableOutlineStyle = function() {
    return {
      stroke: "#FEB663",
      strokeWidth: 2,
      strokeDasharray: "4 4",
      fill: "transparent"
    };
  };
  GroupNodeModel2.prototype.getData = function() {
    var data = _super.prototype.getData.call(this);
    data.children = __spread4(this.children);
    var properties = data.properties;
    delete properties.groupAddable;
    delete properties.isFolded;
    return data;
  };
  GroupNodeModel2.prototype.getHistoryData = function() {
    var data = _super.prototype.getData.call(this);
    data.children = __spread4(this.children);
    var properties = data.properties;
    delete properties.groupAddable;
    if (properties.isFolded) {
      data.x = data.x + this.unfoldedWidth / 2 - this.foldedWidth / 2;
      data.y = data.y + this.unfoldedHight / 2 - this.foldedHeight / 2;
    }
    return data;
  };
  return GroupNodeModel2;
}(RectResize_default.model);
var GroupNode = function(_super) {
  __extends14(GroupNode2, _super);
  function GroupNode2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GroupNode2.prototype.getControlGroup = function() {
    var _a = this.props.model, resizable = _a.resizable, properties = _a.properties;
    return resizable && !properties.isFolded ? _super.prototype.getControlGroup.call(this) : null;
  };
  GroupNode2.prototype.getAddedableShape = function() {
    var _a = this.props.model, width = _a.width, height = _a.height, x2 = _a.x, y2 = _a.y, radius = _a.radius, properties = _a.properties;
    if (!properties.groupAddable)
      return null;
    var strokeWidth = this.props.model.getNodeStyle().strokeWidth;
    var style = this.props.model.getAddableOutlineStyle();
    var newWidth = width + strokeWidth + 8;
    var newHeight = height + strokeWidth + 8;
    return (0, import_core15.h)("rect", __assign11(__assign11({}, style), { width: newWidth, height: newHeight, x: x2 - newWidth / 2, y: y2 - newHeight / 2, rx: radius, ry: radius }));
  };
  GroupNode2.prototype.getFoldIcon = function() {
    var model = this.props.model;
    var foldX = model.x - model.width / 2 + 5;
    var foldY = model.y - model.height / 2 + 5;
    if (!model.foldable)
      return null;
    var iconIcon = (0, import_core15.h)("path", {
      fill: "none",
      stroke: "#818281",
      strokeWidth: 2,
      "pointer-events": "none",
      d: model.properties.isFolded ? "M " + (foldX + 3) + "," + (foldY + 6) + " " + (foldX + 11) + "," + (foldY + 6) + " M" + (foldX + 7) + "," + (foldY + 2) + " " + (foldX + 7) + "," + (foldY + 10) : "M " + (foldX + 3) + "," + (foldY + 6) + " " + (foldX + 11) + "," + (foldY + 6) + " "
    });
    return (0, import_core15.h)("g", {}, [
      (0, import_core15.h)("rect", {
        height: 12,
        width: 14,
        rx: 2,
        ry: 2,
        strokeWidth: 1,
        fill: "#F4F5F6",
        stroke: "#CECECE",
        cursor: "pointer",
        x: model.x - model.width / 2 + 5,
        y: model.y - model.height / 2 + 5,
        onClick: function() {
          model.foldGroup(!model.properties.isFolded);
        }
      }),
      iconIcon
    ]);
  };
  GroupNode2.prototype.getResizeShape = function() {
    return (0, import_core15.h)("g", {}, [
      this.getAddedableShape(),
      _super.prototype.getResizeShape.call(this),
      this.getFoldIcon()
    ]);
  };
  return GroupNode2;
}(RectResize_default.view);
var GroupNode_default = {
  type: "group",
  view: GroupNode,
  model: GroupNodeModel
};

// node_modules/@logicflow/extension/es/materials/group/index.js
var __read8 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spread5 = function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read8(arguments[i2]));
  return ar;
};
var Group = function() {
  function Group2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.nodeGroupMap = /* @__PURE__ */ new Map();
    this.graphRendered = function(data) {
      if (data && data.nodes) {
        data.nodes.forEach(function(node) {
          if (node.children) {
            node.children.forEach(function(nodeId) {
              _this.nodeGroupMap.set(nodeId, node.id);
            });
          }
        });
      }
    };
    this.appendNodeToGrop = function(_a2) {
      var data = _a2.data;
      var preGroupId = _this.nodeGroupMap.get(data.id);
      if (preGroupId) {
        var preGroup = _this.lf.getNodeModelById(preGroupId);
        preGroup.removeChild(data.id);
        _this.nodeGroupMap.delete(data.id);
        preGroup.setAllowAppendChild(false);
      }
      var bounds = _this.lf.getNodeModelById(data.id).getBounds();
      var group = _this.getGroup(bounds);
      if (!group)
        return;
      if (data.id !== group.id) {
        group.addChild(data.id);
        _this.nodeGroupMap.set(data.id, group.id);
        group.setAllowAppendChild(false);
      } else if (data.children && data.children.length > 0) {
        data.children.forEach(function(nodeId) {
          _this.nodeGroupMap.set(nodeId, data.id);
        });
      }
    };
    this.deleteGroupChild = function(_a2) {
      var data = _a2.data;
      var groupId = _this.nodeGroupMap.get(data.id);
      if (groupId) {
        var group = _this.lf.getNodeModelById(groupId);
        group.removeChild(data.id);
        _this.nodeGroupMap.delete(data.id);
      }
    };
    this.setActiveGroup = function(_a2) {
      var data = _a2.data;
      var nodeModel = _this.lf.getNodeModelById(data.id);
      if (nodeModel.isGroup)
        return;
      var bounds = nodeModel.getBounds();
      var newGroup = _this.getGroup(bounds);
      if (newGroup || newGroup !== _this.activeGroup) {
        if (_this.activeGroup) {
          _this.activeGroup.setAllowAppendChild(false);
        }
        if (newGroup) {
          _this.activeGroup = newGroup;
          _this.activeGroup.setAllowAppendChild(true);
        }
      }
    };
    lf.register(GroupNode_default);
    this.lf = lf;
    lf.graphModel.addNodeMoveRules(function(model, deltaX, deltaY) {
      if (model.isGroup) {
        lf.graphModel.moveNodes(__spread5(model.children), deltaX, deltaY, true);
        return true;
      }
      var groupModel = lf.getNodeModelById(_this.nodeGroupMap.get(model.id));
      if (groupModel && groupModel.isRestrict) {
        var _a2 = model.getBounds(), x1 = _a2.x1, y1 = _a2.y1, x2 = _a2.x2, y2 = _a2.y2;
        var r2 = groupModel.isAllowMoveTo({
          x1: x1 + deltaX,
          y1: y1 + deltaY,
          x2: x2 + deltaX,
          y2: y2 + deltaY
        });
        return r2;
      }
      return true;
    });
    lf.graphModel.group = this;
    lf.on("node:add", this.appendNodeToGrop);
    lf.on("node:delete", this.deleteGroupChild);
    lf.on("node:drop", this.appendNodeToGrop);
    lf.on("node:dnd-drag", this.setActiveGroup);
    lf.on("node:drag", this.setActiveGroup);
    lf.on("graph:rendered", this.graphRendered);
  }
  Group2.prototype.getGroup = function(bounds) {
    var nodes = this.lf.graphModel.nodes;
    for (var i2 = 0; i2 < nodes.length; i2++) {
      var model = nodes[i2];
      if (model.isGroup && model.isInRange(bounds)) {
        return model;
      }
    }
  };
  Group2.prototype.getNodeGroup = function(nodeId) {
    var groupId = this.nodeGroupMap.get(nodeId);
    if (groupId) {
      return this.lf.getNodeModelById(groupId);
    }
  };
  Group2.pluginName = "group";
  return Group2;
}();

// node_modules/@logicflow/extension/es/tools/flow-path/index.js
init_define_APP_INFO();
var __read9 = function(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
};
var __spread6 = function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read9(arguments[i2]));
  return ar;
};
var FlowPath = function() {
  function FlowPath2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.lf = lf;
    this.pathes = [];
    lf.getPathes = function() {
      if (!_this.startNodeType) {
        throw new Error("\u9700\u8981\u9884\u5148\u6307\u5B9A\u5F00\u59CB\u8282\u70B9\u7C7B\u578B");
      }
      return _this.getPathes();
    };
    lf.setRawPathes = function(pathes) {
      _this.setPathes(pathes);
    };
    lf.getRawPathes = function() {
      return _this.pathes;
    };
    lf.setStartNodeType = function(type) {
      _this.startNodeType = type;
    };
  }
  FlowPath2.prototype.setPathes = function(pathes) {
    this.pathes = pathes.map(function(_a) {
      var routeId = _a.routeId, name = _a.name, elements = _a.elements, type = _a.type;
      return {
        routeId,
        name,
        elements,
        type,
        similarElement: null,
        weight: 0
      };
    });
  };
  FlowPath2.prototype.getPathes = function() {
    var _this = this;
    var graphData = this.lf.getGraphRawData();
    var nodesMap = /* @__PURE__ */ new Map();
    var startNodeIds = [];
    graphData.nodes.forEach(function(node) {
      nodesMap.set(node.id, {
        id: node.id,
        data: node,
        nextNodes: []
      });
      if (node.type === _this.startNodeType) {
        startNodeIds.push(node.id);
      }
    });
    graphData.edges.forEach(function(edge) {
      var node = nodesMap.get(edge.sourceNodeId);
      node.nextNodes.push(edge.targetNodeId);
    });
    var pathElements = [];
    startNodeIds.forEach(function(id) {
      pathElements = pathElements.concat(_this.findPathElements(nodesMap.get(id), nodesMap, []));
    });
    return this.getNewPathes(pathElements);
  };
  FlowPath2.prototype.findPathElements = function(node, nodesMap, elements) {
    if (elements === void 0) {
      elements = [];
    }
    var newPathes = __spread6(elements);
    newPathes.push(node.id);
    if (node.nextNodes.length === 0) {
      return [newPathes];
    }
    var subPath = [];
    for (var i2 = 0; i2 < node.nextNodes.length; i2++) {
      var n2 = nodesMap.get(node.nextNodes[i2]);
      var p = void 0;
      var idx = newPathes.indexOf(n2.id);
      if (idx !== -1) {
        p = [__spread6(newPathes.slice(idx), [n2.id])];
      } else {
        p = this.findPathElements(n2, nodesMap, __spread6(newPathes));
      }
      subPath = subPath.concat(p);
    }
    return subPath;
  };
  FlowPath2.prototype.getNewPathes = function(pathElements) {
    var _this = this;
    var pathes = [];
    var LoopSet = /* @__PURE__ */ new Set();
    pathElements.forEach(function(elements) {
      var routeId = _this.getNewId("path");
      var name = _this.getNewId("\u8DEF\u5F84");
      var isLoop = _this.isLoopPath(elements);
      var elementStr = elements.join(",");
      if (!LoopSet.has(elementStr)) {
        LoopSet.add(elementStr);
        pathes.push({
          routeId,
          name,
          elements,
          type: isLoop,
          weight: 0,
          similarElement: ""
        });
      }
    });
    var oldPathes = JSON.parse(JSON.stringify(this.pathes));
    pathes.forEach(function(newPath) {
      for (var i2 = 0; i2 < oldPathes.length; i2++) {
        var oldPath = oldPathes[i2];
        var weight = _this.similar2Path(__spread6(newPath.elements), __spread6(oldPath.elements));
        if (weight > newPath.weight && oldPath.weight <= weight) {
          newPath.weight = weight;
          newPath.similarElement = oldPath;
          if (weight === oldPath.weight && oldPath.similarElement) {
            oldPath.similarElement.similarElement = null;
            oldPath.similarElement.weight = 0;
            oldPath.similarElement = null;
            oldPath.weight = 0;
          } else {
            oldPath.similarElement = newPath;
            oldPath.weight = weight;
          }
        }
      }
    });
    pathes.forEach(function(newPath) {
      if (newPath.similarElement && newPath.similarElement.similarElement === newPath) {
        newPath.routeId = newPath.similarElement.routeId;
        newPath.name = newPath.similarElement.name;
      }
      delete newPath.similarElement;
      delete newPath.weight;
    });
    this.setPathes(pathes);
    return pathes;
  };
  FlowPath2.prototype.similar2Path = function(x2, y2) {
    var z2 = 0;
    var s2 = x2.length + y2.length;
    x2.sort();
    y2.sort();
    var a2 = x2.shift();
    var b2 = y2.shift();
    while (a2 !== void 0 && b2 !== void 0) {
      if (a2 === b2) {
        z2++;
        a2 = x2.shift();
        b2 = y2.shift();
      } else if (a2 < b2) {
        a2 = x2.shift();
      } else if (a2 > b2) {
        b2 = y2.shift();
      }
    }
    return z2 / s2 * 200;
  };
  FlowPath2.prototype.getNewId = function(prefix) {
    return prefix + "_" + getBpmnId();
  };
  FlowPath2.prototype.isLoopPath = function(elements) {
    var length = elements.length;
    return elements.indexOf(elements[length - 1]) !== length - 1 ? 1 : 0;
  };
  FlowPath2.pluginName = "flowPath";
  return FlowPath2;
}();

// node_modules/@logicflow/extension/es/tools/auto-layout/index.js
init_define_APP_INFO();
var __assign12 = function() {
  __assign12 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p))
          t2[p] = s2[p];
    }
    return t2;
  };
  return __assign12.apply(this, arguments);
};
var POSITION_TYPE = {
  LEFT_TOP: -1,
  LEFT: 0,
  LEFT_BOTTOM: 1
};
var AutoLayout = function() {
  function AutoLayout2(_a) {
    var _this = this;
    var lf = _a.lf;
    this.lf = lf;
    this.trunk = [];
    lf.layout = function(startNodeType) {
      var data = _this.lf.getGraphRawData();
      _this.lf.setStartNodeType(startNodeType);
      var path = _this.lf.getPathes();
      _this.levelHeight = [];
      _this.newNodeMap = /* @__PURE__ */ new Map();
      return _this.layout(data, path);
    };
  }
  AutoLayout2.prototype.layout = function(data, path) {
    var _this = this;
    var trunk = [];
    path.forEach(function(p) {
      var elements = p.elements;
      if (elements.length > trunk.length) {
        trunk = elements;
      } else if (elements.length === trunk.length) {
        if (JSON.stringify(elements) === JSON.stringify(_this.trunk)) {
          trunk = _this.trunk;
        }
      }
    });
    this.trunk = trunk;
    var nodeMap = this.formatData(data);
    var newGraphData = {
      nodes: [],
      edges: []
    };
    for (var i2 = trunk.length - 1; i2 >= 0; i2--) {
      this.setNodePosition(trunk[i2], nodeMap, newGraphData, i2, 1);
    }
    this.lf.graphModel.graphDataToModel(newGraphData);
  };
  AutoLayout2.prototype.setNodePosition = function(nodeId, nodeMap, newGraphData, xLevel, yLevel) {
    var _this = this;
    var n2 = nodeMap[nodeId];
    var text = n2.text, type = n2.type, next = n2.next, properties = n2.properties;
    var x2 = xLevel * 160 + 40;
    var y2 = yLevel * 120;
    var nodeData = {
      id: nodeId,
      x: x2,
      text,
      y: y2,
      type,
      properties
    };
    if (text && typeof text === "object") {
      nodeData.text = __assign12(__assign12({}, text), { x: x2 + text.x, y: y2 + text.y });
    }
    this.newNodeMap.set(nodeData.id, {
      x: nodeData.x,
      y: nodeData.y,
      type
    });
    newGraphData.nodes.push(nodeData);
    n2.isFixed = true;
    this.addLevelHeight(xLevel, 1);
    if (next && next.length > 0) {
      next.forEach(function(nextInfo) {
        var n1 = nodeMap[nextInfo.nodeId];
        if (!n1.isFixed) {
          var nextYLevel = _this.getLevelHeight(xLevel + 1);
          _this.addLevelHeight(xLevel, 1);
          _this.setNodePosition(nextInfo.nodeId, nodeMap, newGraphData, xLevel + 1, nextYLevel + 1);
        } else {
        }
        newGraphData.edges.push(__assign12({ id: nextInfo.edgeId, type: nextInfo.edgeType, sourceNodeId: nodeId, targetNodeId: nextInfo.nodeId, properties: nextInfo.properties, text: nextInfo.text }, _this.getEdgeDataPoints(nodeId, nextInfo.nodeId)));
      });
    }
    return nodeData;
  };
  AutoLayout2.prototype.getEdgeDataPoints = function(sourceNodeId, targetNodeId) {
    var source = this.newNodeMap.get(sourceNodeId);
    var target = this.newNodeMap.get(targetNodeId);
    var _a = this.getShape(sourceNodeId), width = _a.width, height = _a.height;
    var _b = this.getShape(targetNodeId), targetWidth = _b.width, targetHeight = _b.height;
    var postionType = this.getRelativePosition(source, target);
    var startPoint = {
      x: source.x,
      y: source.y
    };
    var endPoint = {
      x: target.x,
      y: target.y
    };
    switch (postionType) {
      case POSITION_TYPE.LEFT:
        startPoint.x = source.x + width / 2;
        endPoint.x = target.x - targetWidth / 2;
        break;
      case POSITION_TYPE.LEFT_TOP:
        startPoint.y = source.y + height / 2;
        endPoint.x = target.x - targetWidth / 2;
        break;
      case POSITION_TYPE.LEFT_BOTTOM:
        startPoint.x = source.x + width / 2;
        endPoint.y = target.y + targetHeight / 2;
        break;
      default:
        break;
    }
    return {
      startPoint,
      endPoint
    };
  };
  AutoLayout2.prototype.getRelativePosition = function(source, target) {
    var y2 = source.y;
    var y1 = target.y;
    var postionType;
    if (y2 < y1) {
      postionType = -1;
    } else if (y2 === y1) {
      postionType = 0;
    } else {
      postionType = 1;
    }
    return postionType;
  };
  AutoLayout2.prototype.getShape = function(nodeId) {
    var nodeModel = this.lf.getNodeModelById(nodeId);
    return {
      height: nodeModel.height,
      width: nodeModel.width
    };
  };
  AutoLayout2.prototype.formatData = function(data) {
    var nodeMap = data.nodes.reduce(function(nMap, node) {
      var type = node.type, properties = node.properties, text = node.text, x2 = node.x, y2 = node.y;
      if (text && typeof text === "object") {
        text.x = text.x - x2;
        text.y = text.y - y2;
      }
      nMap[node.id] = {
        type,
        properties,
        text,
        prev: [],
        next: []
      };
      return nMap;
    }, {});
    data.edges.forEach(function(edge) {
      var sourceNodeId = edge.sourceNodeId, targetNodeId = edge.targetNodeId, id = edge.id, properties = edge.properties, text = edge.text;
      var newText = text;
      if (typeof text === "object") {
        newText = text.value;
      }
      nodeMap[sourceNodeId].next.push({
        edgeId: id,
        nodeId: targetNodeId,
        edgeType: edge.type,
        properties,
        text: newText
      });
      nodeMap[targetNodeId].prev.push({
        edgeId: id,
        nodeId: sourceNodeId,
        properties,
        text: newText
      });
    });
    return nodeMap;
  };
  AutoLayout2.prototype.addLevelHeight = function(level, height, isNegative) {
    if (height === void 0) {
      height = 1;
    }
    if (isNegative === void 0) {
      isNegative = false;
    }
    var l2 = this.levelHeight[level];
    if (!l2) {
      l2 = {
        positiveHeight: 0,
        negativeHeight: 0
      };
      this.levelHeight[level] = l2;
    }
    isNegative ? l2.negativeHeight -= height : l2.positiveHeight += height;
  };
  AutoLayout2.prototype.getLevelHeight = function(level, isNegative) {
    if (isNegative === void 0) {
      isNegative = false;
    }
    var val = this.levelHeight[level];
    if (!val) {
      return 0;
    }
    return isNegative ? val.negativeHeight : val.positiveHeight;
  };
  AutoLayout2.pluginName = "AutoLayout";
  return AutoLayout2;
}();
export {
  AutoLayout,
  BpmnAdapter,
  BpmnElement,
  BpmnXmlAdapter,
  ContextMenu,
  Control,
  CurvedEdge,
  DiamondResize_default as DiamondResize,
  DndPanel,
  EllipseResize_default as EllipseResize,
  EndEventModel,
  EndEventView,
  ExclusiveGatewayModel,
  ExclusiveGatewayView,
  FlowPath,
  Group,
  GroupNode_default as GroupNode,
  HtmlResize_default as HtmlResize,
  InsertNodeInPolyline,
  Menu,
  MiniMap,
  NodeResize,
  RectResize_default as RectResize,
  SelectionSelect,
  SequenceFlowModel,
  SequenceFlowView,
  ServiceTaskModel,
  ServiceTaskView,
  Snapshot,
  StartEventModel,
  StartEventView,
  TurboAdapter,
  UserTaskModel,
  UserTaskView,
  lfJson2Xml,
  lfXml2Json,
  toLogicflowData,
  toTurboData
};
//# sourceMappingURL=@logicflow_extension.js.map
